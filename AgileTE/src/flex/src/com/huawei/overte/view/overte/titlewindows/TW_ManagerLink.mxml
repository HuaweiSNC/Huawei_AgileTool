<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="766" height="406" close="PopUpManager.removePopUp(this)" color="#000000"
			   creationComplete="init()" fontFamily="微软雅黑" fontSize="12"
			   skinClass="com.huawei.overte.view.skins.TitleWindowSkin">
	<fx:Script>
		<![CDATA[
			import com.huawei.overte.event.SdncEvt;
			import com.huawei.overte.handle.DataHandleTool;
			import com.huawei.overte.service.SdnUIService;
			import com.huawei.overte.tools.ConnUtil;
			import com.huawei.overte.tools.PopupManagerUtil;
			import com.huawei.overte.tools.SdncUtil;
			import com.huawei.overte.view.node.StateNode;
			import com.huawei.overte.view.overte.GeneralView;
			import com.huawei.overte.view.overte.OverTEView;
			import com.huawei.overte.view.overte.com.OverTEData;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import org.httpclient.events.HttpDataEvent;
			import org.httpclient.events.HttpResponseEvent;
			
			import spark.events.IndexChangeEvent;
			
			import twaver.IElement;
			import twaver.networkx.NetworkX;
			
			[Bindable]public var fileNameTypeDropDownList:ArrayCollection = new ArrayCollection();
			[Bindable]private var __app:overTegui2;
			[Bindable]private var devices:Array=[];
			[Bindable]private var curarea:String;
			[Bindable]private var projectType:String;//项目类型
			
			public var element:IElement;
			public var connUtil:ConnUtil = ConnUtil.getInstence();//连接java单例
			[Bindable]public var linksarray:ArrayCollection = new ArrayCollection();
			protected function init():void
			{
				__app=SdncUtil.app;
				projectType = SdncUtil.cuProjectType;//初始化项目类型
				curarea = (__app.overte.topoview.selectedChild as OverTEView).ManAreasID;
				devices= DataHandleTool.devices;
				fileNameTypeDropDownList=new ArrayCollection(devices);
				if(projectType=="test"){
				}
				else{
					//初始化页面时 当前管理域下的所有链路连线
					PopupManagerUtil.getInstence().popupLoading(this,false);
					var opsIp:String=SdncUtil.opsIp;
					var webname:String = SdncUtil.projectname;
					var uri:String=ConnUtil.protocolHeader+opsIp+"/"+webname+"/agilete/domains/"+curarea+"/links";
					connUtil.clientQuery(uri,ConnUtil.METHOD_GET,onGetLinksResult,onGetLinksFault);
					PopupManagerUtil.getInstence().closeLoading();
				}
			}
			
			
			private function onGetLinksResult(e:HttpResponseEvent,data:String):void
			{
				linksarray.removeAll();
				if(e.response.code=="200"){
					if(data == ""){
						PopupManagerUtil.getInstence().closeLoading();	
						/**"Topo链路信息获取失败","提示"**/
						Alert.show(resourceManager.getString('global','all.getfail'),
							resourceManager.getString('global','all.prompt'));
						return;
					}else{
						var linksxml:XML = new XML(data);
						for(var i:int=0;i<linksxml.topoLink.length();i++){
							var fromdevice:Object=DataHandleTool.finddeviceById(linksxml.topoLink[i].headNodeConnector.toponode.nodeID.toString())
							var todevice:Object=DataHandleTool.finddeviceById(linksxml.topoLink[i].tailNodeConnector.toponode.nodeID.toString())
							if(fromdevice.hasOwnProperty("deviceName")&&todevice.hasOwnProperty("deviceName")){
								linksarray.addItem({
									linkname:linksxml.topoLink[i].name.toString(),
									frominterface:linksxml.topoLink[i].headNodeConnector.Connectorid.toString(),
									frominterfaceIP:linksxml.topoLink[i].headNodeConnector.Connectorip.toString(),
									fromNodeID:linksxml.topoLink[i].headNodeConnector.toponode.nodeID.toString(),
									fromNodeName:fromdevice["deviceName"].toString(),
									fromNodeTopoID:linksxml.topoLink[i].headNodeConnector.toponode.nodeType.toString(),
									
									tointerface:linksxml.topoLink[i].tailNodeConnector.Connectorid.toString(),
									tointerfaceIP:linksxml.topoLink[i].tailNodeConnector.Connectorip.toString(),
									toNodeID:linksxml.topoLink[i].tailNodeConnector.toponode.nodeID.toString(),
									toNodeName:todevice["deviceName"].toString(),
									toNodeTopoID:linksxml.topoLink[i].tailNodeConnector.toponode.nodeType.toString()
									
								})
							}
							
						}
					}
					PopupManagerUtil.getInstence().closeLoading();
				}else{
					/**"Topo链路信息获取失败\n错误代码"+e.response.code,"提示"**/
					Alert.show(resourceManager.getString('global','all.getfail')+"\n"
						+resourceManager.getString('global','all.errorcode')+e.response.code,
						resourceManager.getString('global','all.prompt'));
				}
				
			}
			
			private function onGetLinksFault(e:Event):void
			{
				PopupManagerUtil.getInstence().closeLoading();
				/**"Topo链路信息获取连接出错","提示"**/
				Alert.show(resourceManager.getString('global','prompt.getlink')
					+resourceManager.getString('global','all.error'),
					resourceManager.getString('global','all.prompt'));
			}
			
			public function addFlow():void
			{
				var Add_link:ADD_DgLink=ADD_DgLink(PopUpManager.createPopUp(this,ADD_DgLink,true));
				Add_link.tw_link = this;
				PopUpManager.centerPopUp(Add_link);
			}
			
			public function queryLinks():void
			{
				PopupManagerUtil.getInstence().popupLoading(this,false);
				var opsIp:String=SdncUtil.opsIp;
				var webname:String = SdncUtil.projectname;
				var uri:String=ConnUtil.protocolHeader+opsIp+"/"+webname+"/agilete/domains/"+curarea+"/links";
				connUtil.clientQuery(uri,ConnUtil.METHOD_GET,onGetLinksResult,onGetLinksFault);
				PopupManagerUtil.getInstence().closeLoading();
			}
			
			public function editFlow(name:String,identifyIndex:String,desIp:String,interfaceName:String):void
			{
				var edit_link:ADD_Link=ADD_Link(PopUpManager.createPopUp(this,ADD_Link,true));
				edit_link.handleflag="edit";
				PopUpManager.centerPopUp(edit_link);
			}
			
			public function deleteFlow():void
			{
				/**"确定删除？","提示"**/
				Alert.show(resourceManager.getString('global','all.ifdeleted')+"？",
					resourceManager.getString('global','all.prompt'),
					Alert.YES|Alert.NO,this,closeDelete);
			}
			public function closeDelete(e:CloseEvent):void
			{
				if(e.detail==Alert.YES){
					PopupManagerUtil.getInstence().popupLoading(__app,false);
					var link:Object=g.selectedItem;
					var linkname:String=link["linkname"];
					var opsIp:String=SdncUtil.opsIp;
					var webname:String = SdncUtil.projectname;
					var uri:String=ConnUtil.protocolHeader+opsIp+"/"+webname+"/agilete/domains/"+curarea+"/links?name="+linkname;
					connUtil.clientQuery(uri,ConnUtil.METHOD_DELETE,onDeleteLinksResult,onDeleteLinksFault);
				}
				
			}
			private function onDeleteLinksResult(e:HttpDataEvent):void
			{
				PopupManagerUtil.getInstence().closeLoading();
				if(e.bytes.toString()=="true"){
					/**"链路删除成功","提示"**/
					Alert.show(resourceManager.getString('global','all.deletedsuccess'),
						resourceManager.getString('global','all.prompt'));
					linksarray.removeItemAt(g.selectedIndex);
				}else{
					/**"链路删除失败","提示"**/
					Alert.show(resourceManager.getString('global','all.deletedfail'),
						resourceManager.getString('global','all.prompt'));
				}
			}
			private function onDeleteLinksFault(e:Event):void
			{
				PopupManagerUtil.getInstence().closeLoading();
				DataHandleTool.showOnConsole("Topo链路信息删除连接出错\n"+e.toString())
				/**"Topo链路信息删除连接出错","提示"**/
				Alert.show(resourceManager.getString('global','all.deletederror'),
					resourceManager.getString('global','all.prompt'));
			}
			/**
			 * Topo链路列表中 源设备接口显示接口名称（IP地址）
			 * */
			private function FromInterfaceDisplayFunction(data:Object,col:GridColumn):String      
			{      
				var label:String = "";      
				if(data.hasOwnProperty("frominterface")){      
					label+=data.frominterface+" ("+data.frominterfaceIP+")";
				}      
				return label;      
			}  
			/**
			 * Topo链路列表中目的设备接口显示接口名称（IP地址）
			 * */
			private function ToInterfaceDisplayFunction(data:Object,col:GridColumn):String      
			{      
				var label:String = "";      
				if(data.hasOwnProperty("tointerface")){      
					label+=data.tointerface+" ("+data.tointerfaceIP+")";
				}      
				return label;      
			}   
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:GlowFilter id="glow" blurX="8" blurY="8" color="0xff0000"/>
	</fx:Declarations>
	<mx:Canvas backgroundColor="0xcccccc" width="100%" height="100%">
		<s:VGroup id="content" width="100%" height="100%">
			<s:Group width="100%" height="30">
				<!--增加...-->
				<s:Button id="btn" right="{g.x}" bottom="0" label="{resourceManager.getString('global','all.add')}..." click="addFlow()"/>
			</s:Group>
			<s:Group width="100%" height="95%">
				<s:DataGrid id="g" width="95%" height="95%" dataProvider="{linksarray}"
							horizontalCenter="0" requestedRowCount="4" textAlign="center"
							verticalCenter="0">
					<s:columns>
						<s:ArrayList>
							<!--源设备-->
							<s:GridColumn dataField="fromNodeName"
										  headerRenderer="com.huawei.overte.view.common.render.dgheaderReader"
										  headerText="{resourceManager.getString('global','all.srcDevice')}"></s:GridColumn>
							<!--源设备接口-->
							<s:GridColumn dataField="frominterface"
										  headerRenderer="com.huawei.overte.view.common.render.dgheaderReader"
										  headerText="{resourceManager.getString('global','all.srcinterface')}" labelFunction="FromInterfaceDisplayFunction"></s:GridColumn>
							<!--目的设备-->
							<s:GridColumn dataField="toNodeName" 
										  headerRenderer="com.huawei.overte.view.common.render.dgheaderReader"
										  headerText="{resourceManager.getString('global','all.desDevice')}"></s:GridColumn>
							<!--目的设备接口-->
							<s:GridColumn dataField="tointerface" 
										  headerRenderer="com.huawei.overte.view.common.render.dgheaderReader"
										  headerText="{resourceManager.getString('global','all.desinterface')}" labelFunction="ToInterfaceDisplayFunction"></s:GridColumn>
							<!--编辑-->
							<s:GridColumn editable="false" width="80"
										  headerRenderer="com.huawei.overte.view.common.render.dgheaderReader"
										  headerText="{resourceManager.getString('global','all.edit')}" visible="false">
								<s:itemRenderer>
									<fx:Component>
										<s:GridItemRenderer>
											<mx:LinkButton fontWeight="normal"  icon="@Embed('assets/imgs/icons/edit.png')"  
														   label="{resourceManager.getString('global','all.edit')}..."  horizontalCenter="0" verticalCenter="0"
													  click="outerDocument.editFlow(data.name,data.identifyIndex,data.desIp,data.interfaceName)"/>
										</s:GridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							<!--删除-->
							<s:GridColumn editable="false" width="80"
										  headerRenderer="com.huawei.overte.view.common.render.dgheaderReader"
										  headerText="{resourceManager.getString('global','all.delete')}">
								<s:itemRenderer>
									<fx:Component>
										<s:GridItemRenderer>
											<mx:LinkButton fontWeight="normal"  icon="@Embed('assets/imgs/icons/delete.png')"  
														   label="{resourceManager.getString('global','all.delete')}"  horizontalCenter="0" verticalCenter="0"
													  click="outerDocument.deleteFlow()"/>
										</s:GridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
						</s:ArrayList>
					</s:columns>
				</s:DataGrid>
			</s:Group>
			<s:Group width="100%" height="30">
				<!--退出-->
				<s:Button id="closebtn" right="{g.x}" top="0" label="{resourceManager.getString('global','all.exit')}"
						  click="PopUpManager.removePopUp(this)"/>
			</s:Group>
		</s:VGroup>
	</mx:Canvas>
</s:TitleWindow>