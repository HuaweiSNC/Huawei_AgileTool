<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="554" height="492" close="PopUpManager.removePopUp(this)" color="#000000"
			   creationComplete="init()" fontFamily="微软雅黑" fontSize="12"
			   skinClass="com.huawei.overte.view.skins.TitleWindowSkin" 
			   title="{resourceManager.getString('global','mgtunnel.addtunnel')}"
			   width.Tunnel_OneWay="484" height.Tunnel_OneWay="516"
			   width.Tunnel_TwoWay="628" height.Tunnel_TwoWay="476">
	<fx:Script>
		<![CDATA[
			import com.huawei.overte.event.SdncEvt;
			import com.huawei.overte.handle.DataHandleTool;
			import com.huawei.overte.model.Data;
			import com.huawei.overte.tools.ConnUtil;
			import com.huawei.overte.tools.PopupManagerUtil;
			import com.huawei.overte.tools.SdncUtil;
			import com.huawei.overte.view.node.StateNode;
			import com.huawei.overte.view.overte.OverTEView;
			import com.huawei.overte.view.overte.com.OverTEData;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.states.State;
			import mx.validators.Validator;
			
			import org.httpclient.events.HttpDataEvent;
			import org.httpclient.events.HttpResponseEvent;
			
			import twaver.IData;
			import twaver.Link;
			import twaver.core.util.h._ED;
			[Bindable]
			private var isEnbled:Boolean=true;
			[Bindable]public var explicitPathsData:ArrayCollection = new ArrayCollection();//主备path列表数据源
			public var tw_Tunnel:TW_ManagerTunnel;
			[Bindable]public var curdevice:Object;//源设备对象---弹出窗口时已初始化
			[Bindable]public var desdevice:Object;//目的设备对象
			[Bindable]public var bindPathName:String;
			[Bindable]public var projectType:String;//当前项目类型
			[Bindable]public var dgPathArray:ArrayCollection = new ArrayCollection();
			[Bindable]public  var DesDeviceArray:ArrayCollection;//目的设备下拉框数据源
			[Bindable]private var curarea:String;//当前管理域
			[Bindable]
			public var mydata:Data = Data.getInstence();
			public var connUtil:ConnUtil = ConnUtil.getInstence();//连接java单例
			[Bindable]public var data:Object;
			public var handleFlag:String="add"; //判定是修改还是增加
			public var name_desDecice; //修改时，找到传过来的目的设备名称
			public var name_mainPath; //修改时，找到传过来的目的主路
			public var tunnelindex:ArrayCollection = new ArrayCollection();
			private var __app:overTegui2;//主应用程序
			public var hottime:String = ""; //ops上获得回切等待时间
			protected function init():void
			{
				
				var devices:Array = DataHandleTool.devices;
				var desdevices:Array = SdncUtil.removeCurDevice(curdevice['deviceName'],devices)
				__app = SdncUtil.app;//初始化主应用程序
				DesDeviceArray=new ArrayCollection(desdevices);
				projectType = SdncUtil.cuProjectType;
				curarea = (__app.overte.topoview.selectedChild as OverTEView).ManAreasID;//当前管理域
				if(handleFlag == "edit"){
					for(var i:int=0;i<DesDeviceArray.length;i++){
						if(DesDeviceArray[i].deviceName ==name_desDecice){
							desDevice.selectedIndex = i;
						}
					}
					for(var j:int=0;j<explicitPathsData.length;j++){
						if(explicitPathsData[j].name == name_mainPath){
							mainPath.selectedIndex = j;
						}
					}
				}
				if(hottime == ""){
					realForGetwtrs();
				}
			}
			
			/**
			 * 真实项目中 获取域的回切等待时间
			 * */
			public function realForGetwtrs():void{
				var opsIp:String=SdncUtil.opsIp;
				var webname:String = SdncUtil.projectname;
				var uri:String=ConnUtil.protocolHeader+opsIp+"/"+webname+"/agilete/domains/"+curarea + "/wtrs?name="+curarea;
				connUtil.clientQuery(uri,ConnUtil.METHOD_GET,onGetwtrsResult,onGetwtrsFault);
			}
			
			/**
			 * 查询回切等待时间成功
			 * */
			private function onGetwtrsResult(e:HttpResponseEvent,data:String):void{
				hotStandbyWtr.text = "";
				if(e.response.code != "200"){
					return;
				}else{
					// 赋值 
					var wtrsXml:XML = new XML(data);
					var i:Number = 3*60*Number(wtrsXml.wtr.value)
					if(i>1000){
						hotStandbyWtr.text = "1000";
					}else{
						hotStandbyWtr.text = i.toString();
					}
				}
			}
			
			/**
			 * 查询回切等待时间失败
			 * */
			private function onGetwtrsFault(e:Event):void{
				trace("获取回切等待时间信息连接出错"+e.toString(),"提示");
			}
			
			protected function addpath_click(event:MouseEvent):void
			{
				desdevice = desDevice.selectedItem;//添加Path时 初始化目的设备对象
				/*每一条Tunnel最多可创建两条Path*/
				if(explicitPathsData.length<2){
					var AddPath:ADD_Path=ADD_Path(PopUpManager.createPopUp(this,ADD_Path,true));
					AddPath.pathArray = explicitPathsData;
					AddPath.startdevice = curdevice;//初始化 Add path页面源设备对象
					AddPath.desdevice = desdevice;//初始化 Add path页面目的设备对象
					//					AddPath.addEventListener(SdncEvt.SAVE_PATH_EVENT,savePath)//监听添加Path页面保存事件
					PopUpManager.centerPopUp(AddPath);
				}else{
					/**"只能配置一组主备路径","warn"**/
					Alert.show(resourceManager.getString('global','mgtunnel.path.onlyone'),"warn",Alert.OK);
				}
			}
			
			/**
			 * 删除主备path事件
			 *  @param dataName 
			 * */
			public function deletePath():void
			{
				/**"确定删除？","提示"**/
				Alert.show(resourceManager.getString('global','all.ifdeleted')+"？",
					resourceManager.getString('global','all.prompt'),
					Alert.YES|Alert.NO,this,closeDelete);
			}
			
			/**
			 * 确定删除path事件
			 * */
			public function closeDelete(e:CloseEvent):void
			{
				if(e.detail==Alert.YES){
					explicitPathsData.removeItemAt(historyRecord.selectedIndex);
				}
			}
			
			/**
			 * 编辑主备path事件
			 *  @param dataName 
			 * */
			public function eidtPath(dataName:String):void
			{
				desdevice = desDevice.selectedItem;//添加Path时 初始化目的设备对象
				var EditPath:ADD_Path=ADD_Path(PopUpManager.createPopUp(this,ADD_Path,true));
				EditPath.handleFlag ="edit";
				/**"编辑Path"**/
				EditPath.title = resourceManager.getString('global','all.edit')+"Path";
				EditPath.pathArray = explicitPathsData;
				EditPath.startdevice = curdevice;//初始化 Add path页面源设备对象
				EditPath.desdevice = desdevice;//初始化 Add path页面目的设备对象
				EditPath.pathName.enabled = false;
				EditPath.pathName.text = dataName;
				PopUpManager.centerPopUp(EditPath);
			}
			protected function savebtn_clickHandler(event:MouseEvent):void
			{
				if(projectType=="test"){
					saveTunnelByTest()
				}else{
					var arr:Array = [hotStandbyWtrTimeV];
					var resultArr:* = Validator.validateAll(arr);
					if(resultArr.length != 0){
						
					}else if(tunnelName.text.length==0){
						Alert.show(resourceManager.getString('global','mgtunnel.tunnel.tunnelNull'),
							resourceManager.getString('global','all.prompt'));
					}else if(tunnelName.text.substr(0,6)!="Tunnel"){
						Alert.show(resourceManager.getString('global','mgtunnel.tunnel.musttunnel'),
							resourceManager.getString('global','all.prompt'));
					}else if(searchindex("",tunnelName.text)==true){
						tunnelName.text="";
						Alert.show(resourceManager.getString('global','mgtunnel.tunnel.tunnelexist'),
							resourceManager.getString('global','all.prompt'));
					}else if(tunnelID.text.length==0){
						Alert.show(resourceManager.getString('global','mgtunnel.tunnel.tunnelflagNull'),
							resourceManager.getString('global','all.prompt'));
					}else if(searchindex(tunnelID.text,"")==true){
						tunnelID.text=""
						Alert.show(resourceManager.getString('global','mgtunnel.tunnel.tunnelflagExist'),
							resourceManager.getString('global','all.prompt'));
					}else if(explicitPathsData.length==0){
						Alert.show(resourceManager.getString('global','mgtunnel.tunnel.tunnelPathNull'),
							resourceManager.getString('global','all.prompt'));
					}
					else{
//						if(hotStandbyWtr.text != hottime){
//							editwtrsByReal();
//						}
						if(handleFlag == "add"){
							saveTunnelByReal()
						}else if(handleFlag == "edit"){
							editTunnelByReal();
						}
					}
					
				}
			}
			public function searchindex(index:String="",tunnelName:String=""):Boolean{
				var orentity:Boolean = false;
				for(var i:int=0;i<tunnelindex.length;i++){
					if(index!=""&&tunnelindex[i].identifyIndex==index){
						orentity=true;
						break;
					}
					if(tunnelName!=""&&tunnelindex[i].tunnelname==tunnelName){
						orentity=true;
						break;
					}
				}
				return orentity;
			}
			public var Tunnelarray:ArrayCollection = new ArrayCollection();
			/**
			 * 测试工程：添加Tunnel保存事件
			 * */
			public function saveTunnelByTest():void{
				if(Ordouble.selected){
					for(var i:int=0;i<2;i++){
						if(i==0){
							Tunnelarray.addItem({
								device:curdevice['deviceName'],
								name:tunnelName.text,
								identifyIndex:tunnelID.text,
								ingressIp:srcIP.text,
								egressIp:desIP.text,
								hotStandbyTime:hotStandbyWtr.text,
								isDouleConfig:Ordouble.selected,
								desDeviceName:desDevice.selectedItem.devicename,
								bindpath:mainPath.selectedItem.name,
								allpath:explicitPathsData
							})
						}else{
							Tunnelarray.addItem({
								device:desDevice.selectedItem.devicename,
								name:tunnelName.text,
								identifyIndex:tunnelID.text,
								ingressIp:desIP.text,
								egressIp:srcIP.text,
								hotStandbyTime:hotStandbyWtr.text,
								isDouleConfig:Ordouble.selected,
								desDeviceName:curdevice['deviceName'],
								bindpath:mainPath.selectedItem.name,
								allpath:explicitPathsData
							})
						}
						
					}
				}else{
					Tunnelarray.addItem({
						device:curdevice['deviceName'],
						name:tunnelName.text,
						identifyIndex:tunnelID.text,
						ingressIp:srcIP.text,
						egressIp:desIP.text,
						hotStandbyTime:hotStandbyWtr.text,
						isDouleConfig:Ordouble.selected,
						desDeviceName:desDevice.selectedItem.devicename,
						bindpath:mainPath.selectedItem.name,
						allpath:explicitPathsData
					})
				}
				this.dispatchEvent(new SdncEvt(SdncEvt.SAVE_TUNNEL_EVENT,Tunnelarray))
				
			}
			/**
			 * 真实工程保存当前设备Tunnel
			 * */
			public function saveTunnelByReal():void{
				//初始化页面时 默认请求第一个设备上的Tunnel信息
				PopupManagerUtil.getInstence().popupLoading(__app);
				var addTunnelBody:String = "<tunnels><tunnel>"; 
				addTunnelBody+= "<name>"+tunnelName.text+"</name>"; 
				addTunnelBody+= "<identifyIndex>"+tunnelID.text+"</identifyIndex>"; 
				addTunnelBody+= "<ingressIp>"+srcIP.text+"</ingressIp>"; 
				addTunnelBody+= "<egressIp>"+desIP.text+"</egressIp>"; 
				addTunnelBody+= "<hotStandbyTime>"+hotStandbyWtr.text+"</hotStandbyTime>"; 
				addTunnelBody+= "<isDouleConfig>"+Ordouble.selected+"</isDouleConfig>"; 
				addTunnelBody+= "<desDeviceName>"+desDevice.selectedItem.deviceName+"</desDeviceName>"; 
				addTunnelBody+= "<bestEffortEnable>"+isEscape.selected.toString()+"</bestEffortEnable>"; 
				addTunnelBody+= "<deviceId>"+curdevice['id']+"</deviceId>";
				addTunnelBody+= "<state></state>"; 
				addTunnelBody+= "<tunnelPaths><tunnelPath>"; 
				addTunnelBody+= "<pathType>main</pathType>"; 
				addTunnelBody+= "<pathName>"+mainPath.selectedItem.name+"</pathName>"; 
				addTunnelBody+= "<lspState>up</lspState>";
				addTunnelBody+= "</tunnelPath><tunnelPath>";
				addTunnelBody+= "<pathType>backup</pathType>"; 
				addTunnelBody+= "<pathName>"+searchBackPath()+"</pathName>"; 
				addTunnelBody+= "<lspState>up</lspState>";
				addTunnelBody+= "</tunnelPath></tunnelPaths>";
				addTunnelBody+= "<paths>";
				for(var i:int=0;i<explicitPathsData.length;i++){
					addTunnelBody+= "<path><name>"+explicitPathsData[i].name+"</name><nextHops>";
					var hotArray:ArrayCollection = explicitPathsData[i].hoparray
					for(var j:int=0;j<hotArray.length;j++){
						addTunnelBody+= "<nextHop>";
						addTunnelBody+= "<id>"+hotArray[j].id+"</id>";
						addTunnelBody+= "<nextIp>"+hotArray[j].ip+"</nextIp>";
						addTunnelBody+= "</nextHop>";
					}
					addTunnelBody+= "</nextHops></path>";
				}
				addTunnelBody+= "</paths></tunnel>";
				if(Ordouble.selected){
					addTunnelBody+= "<tunnel><name>"+tunnelName.text+"</name>"; 
					addTunnelBody+= "<identifyIndex>"+tunnelID.text+"</identifyIndex>"; 
					addTunnelBody+= "<ingressIp>"+desIP.text+"</ingressIp>"; 
					addTunnelBody+= "<egressIp>"+srcIP.text+"</egressIp>"; 
					addTunnelBody+= "<hotStandbyTime>"+hotStandbyWtr.text+"</hotStandbyTime>"; 
					addTunnelBody+= "<isDouleConfig>"+Ordouble.selected+"</isDouleConfig>"; 
					addTunnelBody+= "<desDeviceName>"+curdevice['deviceName']+"</desDeviceName>"; 
					addTunnelBody+= "<bestEffortEnable>"+isEscape.selected.toString()+"</bestEffortEnable>"; 
					addTunnelBody+= "<deviceId>"+desDevice.selectedItem.id+"</deviceId>"; 
					addTunnelBody+= "<state></state>"; 
					addTunnelBody+= "<tunnelPaths><tunnelPath>"; 
					addTunnelBody+= "<pathType>main</pathType>"; 
					addTunnelBody+= "<pathName>"+mainPath.selectedItem.name+"</pathName>"; 
					addTunnelBody+= "<lspState>up</lspState>";
					addTunnelBody+= "</tunnelPath><tunnelPath>";
					addTunnelBody+= "<pathType>backup</pathType>"; 
					addTunnelBody+= "<pathName>"+searchBackPath()+"</pathName>"; 
					addTunnelBody+= "<lspState>up</lspState>";
					addTunnelBody+= "</tunnelPath></tunnelPaths>";
					addTunnelBody+= "<paths>";
					for(var i:int=0;i<explicitPathsData.length;i++){
						var m:int=1;
						addTunnelBody+= "<path><name>"+explicitPathsData[i].name+"</name><nextHops>";
						var hotArray:ArrayCollection = explicitPathsData[i].hoparray
						for(var j:int=hotArray.length-2;j>-1;j--){
							addTunnelBody+= "<nextHop>";
							addTunnelBody+= "<id>"+m+"</id>";
							addTunnelBody+= "<nextIp>"+hotArray[j].ip+"</nextIp>";
							addTunnelBody+= "</nextHop>";
							
							if(j==0){
								addTunnelBody+= "<nextHop>";
								addTunnelBody+= "<id>"+(m+1)+"</id>";
								addTunnelBody+= "<nextIp>"+DataHandleTool.findLoopIPByIfmIP(hotArray[0].ip,SdncUtil.network)+"</nextIp>";
								addTunnelBody+= "</nextHop>";
							}
							m++;
						}
						addTunnelBody+= "</nextHops></path>";
					}
					addTunnelBody+= "</paths></tunnel>";
				}
				addTunnelBody+= "</tunnels>";
				var opsIp:String=SdncUtil.opsIp;
				var webname:String = SdncUtil.projectname;
				var uri:String=ConnUtil.protocolHeader+opsIp+"/"+webname+"/agilete/domains/"+curarea+"/devices/"+curdevice['id']+"/tunnels";
				connUtil.clientQuery(uri,ConnUtil.METHOD_POST,onPostTunnelResult,onPostTunnelFault,addTunnelBody);
			}
			/**
			 * 真实工程修改当前设备Tunnel
			 * */
			public function editTunnelByReal():void{
				PopupManagerUtil.getInstence().popupLoading(__app);
				var addTunnelBody:String = "<tunnels><tunnel>"; 
				addTunnelBody+= "<name>"+tunnelName.text+"</name>"; 
//				addTunnelBody+= "<identifyIndex>"+tunnelID.text+"</identifyIndex>"; 
//				addTunnelBody+= "<ingressIp>"+srcIP.text+"</ingressIp>"; 
//				addTunnelBody+= "<egressIp>"+desIP.text+"</egressIp>"; 
				addTunnelBody+= "<hotStandbyTime>"+hotStandbyWtr.text+"</hotStandbyTime>"; 
				addTunnelBody+= "<bestEffortEnable>"+isEscape.selected.toString()+"</bestEffortEnable>"; 
//				addTunnelBody+= "<isDouleConfig>"+Ordouble.selected+"</isDouleConfig>"; 
//				addTunnelBody+= "<desDeviceName>"+desDevice.selectedItem.deviceName+"</desDeviceName>"; 
//				addTunnelBody+= "<state></state>"; 
//				addTunnelBody+= "<tunnelPaths><tunnelPath>"; 
//				addTunnelBody+= "<pathType>main</pathType>"; 
//				addTunnelBody+= "<pathName>"+mainPath.selectedItem.name+"</pathName>"; 
//				addTunnelBody+= "<lspState>up</lspState>";
//				addTunnelBody+= "</tunnelPath><tunnelPath>";
//				addTunnelBody+= "<pathType>backup</pathType>"; 
//				addTunnelBody+= "<pathName>"+searchBackPath()+"</pathName>"; 
//				addTunnelBody+= "<lspState>up</lspState>";
//				addTunnelBody+= "</tunnelPath></tunnelPaths>";
//				addTunnelBody+= "<paths>";
//				for(var i:int=0;i<explicitPathsData.length;i++){
//					addTunnelBody+= "<path><name>"+explicitPathsData[i].name+"</name><nextHops>";
//					var hotArray:ArrayCollection = explicitPathsData[i].hoparray
//					for(var j:int=0;j<hotArray.length;j++){
//						addTunnelBody+= "<nextHop>";
//						addTunnelBody+= "<id>"+hotArray[j].id+"</id>";
//						addTunnelBody+= "<nextIp>"+hotArray[j].ip+"</nextIp>";
//						addTunnelBody+= "</nextHop>";
//					}
//					addTunnelBody+= "</nextHops></path>";
//				}
//				addTunnelBody+= "</paths></tunnel></tunnels>"
				addTunnelBody+= "</tunnel></tunnels>"
				
				var opsIp:String=SdncUtil.opsIp;
				var webname:String = SdncUtil.projectname;
				var uri:String=ConnUtil.protocolHeader+opsIp+"/"+webname+"/agilete/domains/"+curarea+"/devices/"+curdevice['id']+"/tunnels";
				connUtil.clientQuery(uri,ConnUtil.METHOD_PUT,onPostTunnelResult,onPostTunnelFault,addTunnelBody);
			}
			
			/**
			 * 真实工程修改回切等待时间
			 * */
			public function editwtrsByReal():void{
				var opsIp:String=SdncUtil.opsIp;
				var webname:String = SdncUtil.projectname;
				var uri:String=ConnUtil.protocolHeader+opsIp+"/"+webname+"/agilete/domains/"+curarea+"/wtrs";
				var param:String = "<wtrs><wtr><domainId>"+curarea+"</domainId><value>"+Number(hotStandbyWtr.text)+"</value></wtr></wtrs>"; 
				connUtil.clientQuery(uri,ConnUtil.METHOD_PUT,onQuerywtrsResult,onQuerywtrsFault,param);
			}
			
			/***
			 * 真实工程：修改回切等待时间成功
			 * */
			private function onQuerywtrsResult(e:HttpDataEvent):void
			{
				if(e.bytes.toString()=="true"){
//					Alert.show("回切等待时间修改成功","提示");
				}else{
					/**"回切等待时间修改失败","提示"**/
					Alert.show(resourceManager.getString('global','managertul.hotstandtime')
						+resourceManager.getString('global','all.edit')
						+resourceManager.getString('global','all.failed'),
						resourceManager.getString('global','all.prompt'));
				}
			}
			/***
			 * 真实工程：修改回切等待时间失败
			 * */
			private function onQuerywtrsFault(e:Event):void
			{
				trace("修改回切等待时间信息连接出错"+e.toString(),"提示");
			}
			
			/**
			 * 真实工程保存当前设备Tunnel
			 * */
			public function saveDesTunnelByReal():void{
				var addTunnelBody:String = "<tunnels><tunnel>"; 
				addTunnelBody+= "<name>"+tunnelName.text+"</name>"; 
				addTunnelBody+= "<identifyIndex>"+tunnelID.text+"</identifyIndex>"; 
				addTunnelBody+= "<ingressIp>"+desIP.text+"</ingressIp>"; 
				addTunnelBody+= "<egressIp>"+srcIP.text+"</egressIp>"; 
				addTunnelBody+= "<hotStandbyTime>"+hotStandbyWtr.text+"</hotStandbyTime>"; 
				addTunnelBody+= "<isDouleConfig>"+Ordouble.selected+"</isDouleConfig>"; 
				addTunnelBody+= "<desDeviceName>"+curdevice['deviceName']+"</desDeviceName>"; 
				addTunnelBody+= "<state></state>"; 
				addTunnelBody+= "<tunnelPaths><tunnelPath>"; 
				addTunnelBody+= "<pathType>main</pathType>"; 
				addTunnelBody+= "<pathName>"+mainPath.selectedItem.name+"</pathName>"; 
				addTunnelBody+= "<lspState>up</lspState>";
				addTunnelBody+= "</tunnelPath><tunnelPath>";
				addTunnelBody+= "<pathType>backup</pathType>"; 
				addTunnelBody+= "<pathName>"+searchBackPath()+"</pathName>"; 
				addTunnelBody+= "<lspState>up</lspState>";
				addTunnelBody+= "</tunnelPath></tunnelPaths>";
				addTunnelBody+= "<paths>";
				for(var i:int=0;i<explicitPathsData.length;i++){
					var m:int=1;
					addTunnelBody+= "<path><name>"+explicitPathsData[i].name+"</name><nextHops>";
					var hotArray:ArrayCollection = explicitPathsData[i].hoparray
					for(var j:int=hotArray.length-2;j>-1;j--){
						addTunnelBody+= "<nextHop>";
						addTunnelBody+= "<id>"+m+"</id>";
						addTunnelBody+= "<nextIp>"+hotArray[j].ip+"</nextIp>";
						addTunnelBody+= "</nextHop>";
						
						if(j==0){
							addTunnelBody+= "<nextHop>";
							addTunnelBody+= "<id>"+(m+1)+"</id>";
							addTunnelBody+= "<nextIp>"+DataHandleTool.findLoopIPByIfmIP(hotArray[0].ip,SdncUtil.network)+"</nextIp>";
							addTunnelBody+= "</nextHop>";
						}
						m++;
					}
					addTunnelBody+= "</nextHops></path>";
				}
				addTunnelBody+= "</paths></tunnel></tunnels>";
				//初始化页面时 默认请求第一个设备上的Tunnel信息
				trace(addTunnelBody)
				PopupManagerUtil.getInstence().popupLoading(__app);
				var opsIp:String=SdncUtil.opsIp;
				var webname:String = SdncUtil.projectname;
				var uri:String=ConnUtil.protocolHeader+opsIp+"/"+webname+"/agilete/domains/"+curarea+"/devices/"+desDevice.selectedItem.id+"/tunnels";
				connUtil.clientQuery(uri,ConnUtil.METHOD_POST,onPostDesTunnelResult,onPostTunnelFault,addTunnelBody);
			}
			/***
			 * 真实工程：添加源设备Tunnel信息成功
			 * */
			private function onPostTunnelResult(e:HttpDataEvent):void
			{
//				PopupManagerUtil.getInstence().closeLoading();
				if(e.bytes.toString().search("ok")!=-1){
//					if(Ordouble.selected){
//						saveDesTunnelByReal()
//					}else{
						if(handleFlag=="add"){
							/**"源设备管道增加成功","提示"**/
							Alert.show(resourceManager.getString('global','all.postsuccess'),
								resourceManager.getString('global','all.prompt'));
						}else{
							/**"源设备管道编辑成功","提示"**/
							Alert.show(resourceManager.getString('global','all.putsuccess'),
								resourceManager.getString('global','all.prompt'));
						}
//						tw_Tunnel.queryonetunnel(tunnelName.text,handleFlag);
						tw_Tunnel.querytunnel();
						PopUpManager.removePopUp(this);
//					}
					
				}else{
					if(handleFlag=="add"){
						/**"源设备管道增加失败\n"**/
						Alert.show(resourceManager.getString('global','all.postfail')
							+e.bytes.toString().slice(e.bytes.toString().indexOf("<error-message>")+15,e.bytes.toString().indexOf("</error-message>")),
							resourceManager.getString('global','all.prompt'));
						DataHandleTool.showOnConsole("源设备管道增加失败\n"+e.bytes.toString().slice(e.bytes.toString().indexOf("<error-message>")+15,e.bytes.toString().indexOf("</error-message>")))
					}else{
						/**"设备管道修改失败\n"**/
						Alert.show(resourceManager.getString('global','all.putfail')
							+e.bytes.toString().slice(e.bytes.toString().indexOf("<error-message>")+15,e.bytes.toString().indexOf("</error-message>")),
							resourceManager.getString('global','all.prompt'));
						DataHandleTool.showOnConsole("源设备管道修改失败\n"+e.bytes.toString().slice(e.bytes.toString().indexOf("<error-message>")+15,e.bytes.toString().indexOf("</error-message>")))
					}
					PopupManagerUtil.getInstence().closeLoading();
					
				}
			}
			/**
			 * 关闭编辑窗口
			 * */
			private function closeFunction(e:CloseEvent):void
			{
				PopUpManager.removePopUp(this);
				tw_Tunnel.querytunnel();
			}
			/***
			 * 真实工程：添加目的设备Tunnel信息成功
			 * */
			private function onPostDesTunnelResult(e:HttpDataEvent):void
			{
				if(e.bytes.toString().search("ok")!=-1){
					/**"目的设备管道增加成功","提示"**/
					Alert.show(resourceManager.getString('global','all.desdevice')
						+resourceManager.getString('global','prompt.addtunnel')
						+resourceManager.getString('global','all.success'),
						resourceManager.getString('global','all.prompt'),Alert.OK,this,closeFunction);
					PopupManagerUtil.getInstence().closeLoading();
				}else{
					/**"目的设备管道增加失败\n"**/
					Alert.show(resourceManager.getString('global','all.desdevice')
						+resourceManager.getString('global','prompt.addtunnel')
						+resourceManager.getString('global','all.failed')
						+e.bytes.toString().slice(e.bytes.toString().indexOf("<error-message>")+15,e.bytes.toString().indexOf("</error-message>")),
						resourceManager.getString('global','all.prompt'));
					PopupManagerUtil.getInstence().closeLoading();
				}
			}
			/***
			 * 真实工程：请求Tunnel信息失败
			 * */
			private function onPostTunnelFault(e:Event):void
			{
				PopupManagerUtil.getInstence().closeLoading();
				trace("增加管道信息失败");
			}
			/**
			 * 查询备份路径
			 * */
			public function searchBackPath():String{
				var backPath:String = "";
				for(var i:int=0;i<explicitPathsData.length;i++){
					if(explicitPathsData[i].name!=mainPath.selectedItem.name){
						backPath=explicitPathsData[i].name
					}
				}
				return backPath;
			}
			private function PathDisplayFunction(data:Object,col:GridColumn):String      
			{      
				var label:String = "";  
				if(data.hasOwnProperty("hoparray")){      
					for(var i :int=0;i<data.hoparray.length-1;i++){
						label+=data.hoparray[i]["devicename"]+"→";
					}
					label = label.substring(0,label.length-1);
				} 	 
				return label;      
			}   
			
			protected function desDevice_changeHandler(event:ListEvent):void
			{
				desdevice = desDevice.selectedItem
			}
			
			protected function TodesTunnel_clickHandler(event:MouseEvent):void
			{
				/**"显示目的配置"**/
				if(TodesTunnel.label==resourceManager.getString('global','mgtunnel.tunnel.showdesdeploy')){
					this.currentState="Tunnel_TwoWay";
				}else{
					this.currentState="Tunnel_OneWay";
				}
			}
			var opsIp:String = SdncUtil.opsIp;
			protected function autoPanth(event:MouseEvent):void
			{
				PopupManagerUtil.getInstence().popupLoading(__app);
				var url:String = ConnUtil.protocolHeader+opsIp+"/AgileTeService/agilete/domains/"+curarea;
				ConnUtil.getInstence().clientQuery(url,ConnUtil.METHOD_GET,getReslut,getFault);
			}
			
			private function getReslut(e:HttpResponseEvent,data:String):void
			{
				trace(XML(data.toString()))
				if(data.toString()!="")
				{
					var topostr:String = "<topodata><topo><toponodes></toponodes><topoLinks></topoLinks></topo><demands><demand><Source></Source><Destination></Destination><Bandwidth>10</Bandwidth></demand></demands></topodata>"
					var topodata:XML = XML(topostr)
					var xml:XMLList = XML(data.toString()).domain.topo;
					var nodes:XMLList = xml.toponodes.children();
					
					var links:XMLList = xml.topoLinks.children();
					var link:XMLList = new XMLList;
					if(nodes.length()<=2||links.length()<=1){
						/**"Topo数据不能构成管道","提示"**/
						Alert.show(resourceManager.getString('global','prompt.nottul'),
							resourceManager.getString('global','all.prompt'))
						PopupManagerUtil.getInstence().closeLoading();
					}else{
						for(var i:int = 0;i<nodes.length();i++)
						{
							delete nodes[i].show;
							topodata.topo.toponodes.appendChild(nodes[i])
						}
						
						for(var j:int = 0;j<links.length();j++)
						{
							var fromnode:String = links[j].headNodeConnector.toponode.nodeID.children()[0];
							var tonode:String = links[j].tailNodeConnector.toponode.nodeID.children()[0];
							SdncUtil.network.elementBox.forEachByBreadthFirst(function(item:IData):void
							{
								if(item is Link){
									var link:Link = item as Link;
									if(link.getClient("fromDeviceID")==fromnode && link.getClient("toDeviceID")==tonode)
									{
										//devicename=node.name
										var str:String = "<topoLink><Source>"+links[j].headNodeConnector.toponode.nodeID.children()[0]+"</Source><Sink>"+links[j].tailNodeConnector.toponode.nodeID.children()[0]+"</Sink><Capacity>20</Capacity></topoLink>"
										topodata.topo.topoLinks.appendChild(XML(str))
									}
									else if(link.getClient("fromDeviceID")==tonode && link.getClient("toDeviceID")==fromnode)
									{
										var str:String = "<topoLink><Source>"+links[j].tailNodeConnector.toponode.nodeID.children()[0]+"</Source><Sink>"+links[j].headNodeConnector.toponode.nodeID.children()[0]+"</Sink><Capacity>20</Capacity></topoLink>"
										topodata.topo.topoLinks.appendChild(XML(str))
									}
								}
							});
							
						}
						topodata.demands.demand.Source.children()[0] = curdevice["id"].children()[0];
						topodata.demands.demand.Destination.children()[0] = desDevice.selectedItem.id.children()[0];
						trace(topodata)
					}
				}
				if(topodata.topo.toponodes.children().length()!=0){
					var url:String = ConnUtil.protocolHeader+opsIp+"/AgileTeService/algorithmManage/beiyan";
					ConnUtil.getInstence().clientQuery(url,ConnUtil.METHOD_PUT,putReslut,getFault,topodata);
				}
				
			}
			public function getFault(e:Event):void
			{
				/**"连接失败！","提示"**/
				Alert.show(resourceManager.getString('global','all.failed'),
					resourceManager.getString('global','all.prompt'))
			}
			private function putReslut(e:HttpDataEvent):void
			{
				// TODO Auto Generated method stub
				if(e.bytes.toString().search("Error")!=-1){
					PopupManagerUtil.getInstence().closeLoading();
					/**"自动算路请求失败"**/
					Alert.show(resourceManager.getString('global','managertul.autopath')
						+resourceManager.getString('global','all.failed'));
				}
					
				var xml:XML=XML(e.bytes.toString());
				if(xml.path.wrong.children()[0]==null)
				{
					var paths:XMLList = xml.path.result.children()
					
					var devicename:String = "";
					var interfacename:String = "";
					var ip:String = "";
					explicitPathsData.removeAll();
					for(var a:int = 0;a<paths.length();a++)
					{
						var pxml:XML = paths[a];
						var explicitPathHopData:ArrayCollection = new ArrayCollection
						for(var i:int = 0;i<pxml.children().length();i++)
						{
							if(i==0)
							{
								var fromnode:String = pxml.children()[i].children()[0];
								var tonode:String = pxml.children()[i+1].children()[0];
								SdncUtil.network.elementBox.forEachByBreadthFirst(function(item:IData):void
								{
									if(item is StateNode){
										var node:StateNode = item as StateNode;
										if(node.getClient("id")==pxml.children()[i].children()[0])
										{
											devicename=node.getClient("devicename")
										}
									}
								});
								SdncUtil.network.elementBox.forEachByBreadthFirst(function(item:IData):void
								{
									if(item is Link){
										var link:Link = item as Link;
										if(link.getClient("fromDeviceID")==fromnode && link.getClient("toDeviceID")==tonode)
										{
											//devicename=node.name
											interfacename = link.getClient("frominterface")
											ip = link.getClient("frominterfaceIP")
										}
										else if(link.getClient("fromDeviceID")==tonode && link.getClient("toDeviceID")==fromnode)
										{
											interfacename = link.getClient("tointerface")
											ip = link.getClient("tointerfaceIP")
										}
									}
								});
								explicitPathHopData.addItem({
									id:i+1,
									devicename:devicename,
									interfacename:interfacename,
									ip:ip
								});
							}
								
							else
							{
								var fromnode:String = pxml.children()[i-1].children()[0];
								var tonode:String = pxml.children()[i].children()[0];
								SdncUtil.network.elementBox.forEachByBreadthFirst(function(item:IData):void
								{
									if(item is StateNode){
										var node:StateNode = item as StateNode;
										if(node.getClient("id")==pxml.children()[i].children()[0])
										{
											devicename=node.getClient("devicename")
										}
									}
								});
								SdncUtil.network.elementBox.forEachByBreadthFirst(function(item:IData):void
								{
									if(item is Link){
										var link:Link = item as Link;
										if(link.getClient("fromDeviceID")==fromnode && link.getClient("toDeviceID")==tonode)
										{
											//devicename=node.name
											interfacename = link.getClient("tointerface")
											ip = link.getClient("tointerfaceIP")
										}
										else if(link.getClient("fromDeviceID")==tonode && link.getClient("toDeviceID")==fromnode)
										{
											interfacename = link.getClient("frominterface")
											ip = link.getClient("frominterfaceIP")
										}
									}
								});
								explicitPathHopData.addItem({
									id:i+1,
									devicename:devicename,
									interfacename:interfacename,
									ip:ip
								});
							}
							
							if(i==(pxml.children().length()-1))
							{
								SdncUtil.network.elementBox.forEachByBreadthFirst(function(item:IData):void
								{
									if(item is StateNode){
										var node:StateNode = item as StateNode;
										if(node.getClient("id")==pxml.children()[i].children()[0])
										{
											devicename=node.getClient("devicename")
											ip = node.getClient("deviceTopoIp")
										}
									}
								});
								explicitPathHopData.addItem({
									id:i+2,
									devicename:devicename,
									interfacename:"",
									ip:ip
								});
							}
						}
						explicitPathsData.addItem({
							name:paths[a].@name,
							hoparray:explicitPathHopData
						})
					}
					PopupManagerUtil.getInstence().closeLoading();
					/**"获取成功！","提示"**/
					Alert.show(resourceManager.getString('global','all.getsuccess'),
						resourceManager.getString('global','all.prompt'))
					//getAllDevices()
				}
				else{
					/**"获取失败！错误信息："+xml.path.wrong.children()[0],"提示"**/
					Alert.show(resourceManager.getString('global','all.getfail')+xml.path.wrong.children()[0],
						resourceManager.getString('global','all.prompt'));
					PopupManagerUtil.getInstence().closeLoading();
				}
			}
		]]>
	</fx:Script>
	<s:states>
		<s:State name="Tunnel_OneWay"/>
		<s:State name="Tunnel_TwoWay"/>
	</s:states>
	<fx:Declarations>
		<s:RadioButtonGroup id="radiogroup1"/>
		<s:Fade id="fadeout" duration="500" alphaFrom="1.0" alphaTo="0.0"  />
		<s:Fade id="fadeIn" duration="500" alphaFrom="0.0" alphaTo="1.0"  />
		<s:Fade id="fadeout_up" duration="500" alphaFrom="1.0" alphaTo="0.0"  />
		<s:Fade id="fadeIn_up" duration="500" alphaFrom="0.0" alphaTo="1.0" />
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		
		<mx:NumberValidator id="hotStandbyWtrTimeV" source="{hotStandbyWtr}" property="text"
							domain="int" minValue="10"
							maxValue="1000"
							lowerThanMinError="{resourceManager.getString('global','mgtunnel.hottime.hottimeMin')}"
							exceedsMaxError="{resourceManager.getString('global','mgtunnel.hottime.hottimeMax')}"
							integerError="{resourceManager.getString('global','mgtunnel.hottime.hottimeInt')}"
							requiredFieldError="{resourceManager.getString('global','mgtunnel.hottime.hottimeNull')}"
							trigger="{savebtn}" triggerEvent="click"/>
		
	</fx:Declarations>
	<mx:Canvas backgroundColor="0xcccccc" width="100%" height="100%">
		<s:BorderContainer id="bcc" top="10" width="95%" horizontalCenter="0" showEffect="fadeIn"
						   top.Tunnel_OneWay="10" bottom.Tunnel_OneWay="40"
						   horizontalCenter.Tunnel_OneWay="0"
						   top.Tunnel_TwoWay="10" height.Tunnel_TwoWay="383"
						   horizontalCenter.Tunnel_TwoWay="0">
			<s:VGroup width="100%" height="100%" gap="5"
					  height.Tunnel_OneWay="384"
					  height.Tunnel_TwoWay="384">
				<s:Group id="t" width="100%" height="45" >
					<!--源设备 :-->
					<s:Label left="20" text="{resourceManager.getString('global','all.srcDevice')} :" verticalCenter="-4"
							 left.Tunnel_OneWay="38" width.Tunnel_OneWay="51"
							 verticalCenter.Tunnel_OneWay="-4"
							 left.Tunnel_TwoWay="66" text.Tunnel_TwoWay="{resourceManager.getString('global','all.srcDevice')} :"
							 verticalCenter.Tunnel_TwoWay="-4"/>
					<s:TextInput id="curDevice" left="90" width="127" editable="false"
								 text="{curdevice['deviceName']}" verticalCenter="-4"
								 left.Tunnel_TwoWay="120" width.Tunnel_TwoWay="153"
								 verticalCenter.Tunnel_TwoWay="-4"/>
					<!--目的设备 :-->
					<s:Label right="170" text="{resourceManager.getString('global','all.desDevice')} :" verticalCenter="-4"
							 right.Tunnel_OneWay="145" width.Tunnel_OneWay="65"
							 verticalCenter.Tunnel_OneWay="-4"
							 right.Tunnel_TwoWay="187" text.Tunnel_TwoWay="{resourceManager.getString('global','all.desDevice')} :"
							 verticalCenter.Tunnel_TwoWay="-4"/>
					<mx:ComboBox id="desDevice" right="20" width="127"
								 change="desDevice_changeHandler(event)" cornerRadius="1"
								 dataProvider="{DesDeviceArray}" editable="false"
								 labelField="deviceName" verticalCenter="-4"
								 right.Tunnel_TwoWay="27" width.Tunnel_TwoWay="153"
								 verticalCenter.Tunnel_TwoWay="-4"/>
					<mx:HRule x="0" bottom="6" width="100%"/>
				</s:Group>
				
				<s:HGroup id="hg" width="100%" height="204" gap="0"
						  height.Tunnel_OneWay="229">
					
					<s:VGroup width="100%" gap="5"
							  width.Tunnel_TwoWay="50%">
						<s:Group width="100%" height="5%">
							<!--隧道名称 :-->
							<s:Label text="{resourceManager.getString('global','mgtunnel.tnlname')} :"
									 verticalCenter="0"
									 right.Tunnel_OneWay="292" verticalCenter.Tunnel_OneWay="0"
									 right.Tunnel_TwoWay="210" verticalCenter.Tunnel_TwoWay="0"/>
							<s:TextInput id="tunnelName" left="203" width="153" enabled="{isEnbled}"
										 prompt="{resourceManager.getString('global','mgtunnel.tunnel.inputtunnelName')}" verticalCenter="0"
										 fontStyle.Tunnel_OneWay="normal"
										 fontWeight.Tunnel_OneWay="normal"
										 left.Tunnel_TwoWay="119" fontStyle.Tunnel_TwoWay="normal"
										 verticalCenter.Tunnel_TwoWay="0"
										 toolTip="{resourceManager.getString('global','mgtunnel.tunnel.musttunnel')}"/>
						</s:Group>
						<s:Group width="100%" height="5%">
							<!--隧道标识 :-->
							<s:Label text="{resourceManager.getString('global','mgtunnel.tnlflag')} :"
									 verticalCenter="0"
									 right.Tunnel_OneWay="292" verticalCenter.Tunnel_OneWay="0"
									 right.Tunnel_TwoWay="210" verticalCenter.Tunnel_TwoWay="0"/>
							<s:TextInput id="tunnelID" left="203" width="153" enabled="{isEnbled}"
										 prompt="{resourceManager.getString('global','mgtunnel.tunnel.inputtunnelflag')}" verticalCenter="0"
										 fontStyle.Tunnel_OneWay="normal" restrict="0-9"
										 left.Tunnel_TwoWay="119" fontStyle.Tunnel_TwoWay="normal"
										 verticalCenter.Tunnel_TwoWay="0"/>
						</s:Group>
						
						
						<s:Group width="100%" height="5%">
							<!--源IP地址 :-->
							<s:Label text="{resourceManager.getString('global','all.srcIP')} :"
									 verticalCenter="0"
									 right.Tunnel_OneWay="292" verticalCenter.Tunnel_OneWay="0"
									 right.Tunnel_TwoWay="210" verticalCenter.Tunnel_TwoWay="0"/>
							<s:TextInput id="srcIP" left="203" width="153"
										 editable="false" enabled="{false}" text="{curdevice['deviceTopoIp']}"
										 verticalCenter="0" 
										 left.Tunnel_TwoWay="119" verticalCenter.Tunnel_TwoWay="0"/>
							
						</s:Group>
						
						<s:Group width="100%" height="5%">
							<!--目的IP地址 :-->
							<s:Label text="{resourceManager.getString('global','all.desIP')} :"
									 verticalCenter="0"
									 right.Tunnel_OneWay="292" verticalCenter.Tunnel_OneWay="0"
									 right.Tunnel_TwoWay="210" verticalCenter.Tunnel_TwoWay="0"/>
							<s:TextInput id="desIP" left="203" width="153"
										 enabled="{false}" verticalCenter="0"
										 text="{desDevice.selectedItem.deviceTopoIp}"
										 left.Tunnel_TwoWay="119" verticalCenter.Tunnel_TwoWay="0"/>
						</s:Group>
						
						<s:Group width="100%" height="5%" >
							<!--回切等待时间 :-->
							<s:Label text="{resourceManager.getString('global','mgtunnel.tunnel.tunnelTime')} :"
									 verticalCenter="0"
									 right.Tunnel_OneWay="292" verticalCenter.Tunnel_OneWay="0"
									 right.Tunnel_TwoWay="210" verticalCenter.Tunnel_TwoWay="0"/>
							<s:TextInput id="hotStandbyWtr" left="203" width="153" 
										 
										  verticalCenter="0" prompt="{resourceManager.getString('global','mgtunnel.tunnel.inputtunneltime')}" restrict="0-9"
										 left.Tunnel_OneWay="203" width.Tunnel_OneWay="85"
										 verticalCenter.Tunnel_OneWay="0" 
										 left.Tunnel_TwoWay="119" width.Tunnel_TwoWay="85"
										 verticalCenter.Tunnel_TwoWay="0"/>
							<!--秒-->
							<s:Label text="{resourceManager.getString('global','all.second')}"
									 x.Tunnel_OneWay="305" y.Tunnel_OneWay="0"
									 height.Tunnel_OneWay="100%" verticalAlign.Tunnel_OneWay="middle"
									 y.Tunnel_TwoWay="0" left.Tunnel_TwoWay="221"
									 height.Tunnel_TwoWay="100%" verticalAlign.Tunnel_TwoWay="middle"/>
						</s:Group>
						<s:Group id="gspeed" width="100%" height="5%" includeIn="Tunnel_OneWay" includeInLayout="false" visible="false">
							<!--承诺时速 :-->
							<s:Label text="{resourceManager.getString('global','mgtunnel.limited.speed')} :"
									 verticalCenter="0" right="292" />
							<s:TextInput id="speed" left="203" width="85"  enabled="false"
										 verticalCenter="0"  restrict="0-9"/>
							<!--Kbit/s-->
							<s:Label text="Kbit/s"
									 x="305" y="0" height="100%" verticalAlign="middle"/>
						</s:Group>
						<s:Group id="gsize" width="100%" height="5%" includeIn="Tunnel_OneWay" includeInLayout="false" visible="false">
							<!--突发尺寸 :-->
							<s:Label text="{resourceManager.getString('global','mgtunnel.limited.size')} :"
									 verticalCenter="0" right="292" />
							<s:TextInput id="size" left="203" width="85" enabled="false"
										 verticalCenter="0" restrict="0-9"/>
							<!--Byte-->
							<s:Label text="Byte"
									 x="305" y="0" height="100%" verticalAlign="middle"/>
						</s:Group>
						<s:Group width="100%" height="5%">
							<!--绑定主Path :-->
							<s:Label text="{resourceManager.getString('global','mgtunnel.tunnel.bingdingpath')} :"
									 verticalCenter="0"
									 right.Tunnel_OneWay="292" verticalCenter.Tunnel_OneWay="0"
									 right.Tunnel_TwoWay="210" verticalCenter.Tunnel_TwoWay="0"/>
							<mx:ComboBox id="mainPath" left="203" width="153" cornerRadius="0"
										 dataProvider="{explicitPathsData}" enabled="{isEnbled}"
										 labelField="name" verticalCenter="0"
										 left.Tunnel_TwoWay="119" verticalCenter.Tunnel_TwoWay="0"/>
						</s:Group>
						<s:Group width="100%" height="5%" >
							<!--是否双向配置隧道-->
							<mx:CheckBox id="Ordouble"
										 label="{resourceManager.getString('global','mgtunnel.tunnel.twodeploy')}"
										 fontFamily="SimSun" selected="true" verticalCenter="0"
										 horizontalCenter.Tunnel_OneWay="0"
										 verticalCenter.Tunnel_OneWay="0"
										 left.Tunnel_TwoWay="122" enabled.Tunnel_TwoWay="false"
										 verticalCenter.Tunnel_TwoWay="0"/>
							<!--显示目的配置  关闭目的配置-->
							<mx:Button id="TodesTunnel" includeIn="Tunnel_OneWay,Tunnel_TwoWay"
									   visible="{Ordouble.selected}" y="0"
									   click="TodesTunnel_clickHandler(event)" cornerRadius="0"
									   fontWeight="normal"
									   label.Tunnel_OneWay="{resourceManager.getString('global','mgtunnel.tunnel.showdesdeploy')}"
									   horizontalCenter.Tunnel_OneWay="120"
									   x.Tunnel_TwoWay="194" y.Tunnel_TwoWay="0"
									   label.Tunnel_TwoWay="{resourceManager.getString('global','mgtunnel.tunnel.showsrcdeploy')}"/>
							<mx:CheckBox id="isEscape"
										 fontFamily="SimSun" horizontalCenter="-96" selected="false"
										 verticalCenter="0"
										 label="{resourceManager.getString('global','leftlist.alert.escapablepath')}"
										 horizontalCenter.Tunnel_TwoWay="-75"
										 verticalCenter.Tunnel_TwoWay="0"/>
						</s:Group>
					</s:VGroup>
					<s:VGroup includeIn="Tunnel_TwoWay" width="50%" gap="5">
						<s:Group width="100%" height="5%">
							<!--隧道名称 :-->
							<s:Label right="210"
									 text="{resourceManager.getString('global','mgtunnel.tnlname')} :"
									 verticalCenter="0"/>
							<s:TextInput id="DestunnelName" left="119" width="153" enabled="false"
										 text="{tunnelName.text}" editable="false"
										 verticalCenter="0"/>
						</s:Group>
						<s:Group width="100%" height="5%">
							<!--隧道标识  :-->
							<s:Label right="210"
									 text="{resourceManager.getString('global','mgtunnel.tnlflag')} :"
									 verticalCenter="0"/>
							<s:TextInput id="DestunnelID" left="119" width="153" enabled="false"
										 text="{tunnelID.text}" editable="false"
										 verticalCenter="0"/>
						</s:Group>
						
						
						<s:Group width="100%" height="5%">
							<!--源IP地址 :-->
							<s:Label right="210"
									 text="{resourceManager.getString('global','all.srcIP')} :"
									 verticalCenter="0"/>
							<s:TextInput id="DessrcIP" left="119" width="153"
										 text="{desIP.text}" editable="false"
										 enabled="false"
										 verticalCenter="0"/>
							
						</s:Group>
						
						<s:Group width="100%" height="5%">
							<!--目的IP地址 :-->
							<s:Label right="210"
									 text="{resourceManager.getString('global','all.desIP')} :"
									 verticalCenter="0"/>
							<s:TextInput id="DesdesIP" left="119" width="153"
										 text="{srcIP.text}" editable="false"
										 enabled="false" verticalCenter="0"/>
						</s:Group>
						
						<s:Group width="100%" height="5%" >
							<!--回切等待时间 :-->
							<s:Label right="210"
									 text="{resourceManager.getString('global','mgtunnel.tunnel.tunnelTime')} :"
									 verticalCenter="0"/>
							<s:TextInput id="DeshotStandbyWtr" left="119" width="85" enabled="false"
										 text="{hotStandbyWtr.text}"  verticalCenter="0"/>
							<s:Label y="0" left="217" height="100%" text="{resourceManager.getString('global','all.second')}" verticalAlign="middle"/>
							
						</s:Group>
						
						<s:Group width="100%" height="5%">
							<!--绑定主Path :-->
							<s:Label right="210"
									 text="{resourceManager.getString('global','mgtunnel.tunnel.bingdingpath')} :"
									 verticalCenter="0"/>
							<mx:ComboBox id="DesmainPath" left="119" width="153" cornerRadius="0" enabled="false" editable="false"
										 dataProvider="{explicitPathsData}"  selectedIndex="{mainPath.selectedIndex}"
										 labelField="name" verticalCenter="0"/>
						</s:Group>
						<s:Group width="100%" height="5%" >
						</s:Group>
					</s:VGroup>
				</s:HGroup>
				<s:Group width="100%" height="142"
						 height.Tunnel_OneWay="127"
						 height.Tunnel_TwoWay="123">
					<s:DataGrid id="historyRecord" left="20" right="20" bottom="6" height="99"
								dataProvider="{explicitPathsData}" rowHeight="24"
								left.Tunnel_OneWay="20" right.Tunnel_OneWay="20"
								bottom.Tunnel_OneWay="10" height.Tunnel_OneWay="78"
								left.Tunnel_TwoWay="20" right.Tunnel_TwoWay="20"
								bottom.Tunnel_TwoWay="10" height.Tunnel_TwoWay="78">
						<s:columns>
							<s:ArrayList>
								<!--Path名称-->
								<s:GridColumn dataField="name" headerText="{resourceManager.getString('global','mgtunnel.tunnel.pathName')}"  width.Tunnel_OneWay="100"
											  headerRenderer="com.huawei.overte.view.common.render.dgheaderReader"/>
								<!--隧道Path-->
								<s:GridColumn labelFunction="PathDisplayFunction" dataField="explicitPathsDetails" 
											  headerText="{resourceManager.getString('global','mgtunnel.tunnel.tunnelPath')}"
											  headerRenderer="com.huawei.overte.view.common.render.dgheaderReader"/>
								<!--删除-->
								<s:GridColumn editable="false" width="100" id="del"
											  headerRenderer="com.huawei.overte.view.common.render.dgheaderReader"
											  headerText="{resourceManager.getString('global','all.delete')}">
									<s:itemRenderer>
										<fx:Component>
											<s:GridItemRenderer>
												<mx:LinkButton fontWeight="normal"  label="{resourceManager.getString('global','all.delete')}" click="outerDocument.deletePath()" width="70" 
														  horizontalCenter="0" verticalCenter="0" icon="@Embed('assets/imgs/icons/delete.png')"/>
											</s:GridItemRenderer>
										</fx:Component>
									</s:itemRenderer>
								</s:GridColumn>
								<!--编辑-->
								<s:GridColumn editable="false" width="100" visible="false"
											  headerRenderer="com.huawei.overte.view.common.render.dgheaderReader"
											  headerText="{resourceManager.getString('global','all.edit')}">
									<s:itemRenderer>
										<fx:Component>
											<s:GridItemRenderer>
												<mx:LinkButton fontWeight="normal"  label="{resourceManager.getString('global','all.edit')}..." click="outerDocument.eidtPath(data.name)" width="70" 
														  horizontalCenter="0" verticalCenter="0" icon="@Embed('assets/imgs/icons/edit.png')"/>
											</s:GridItemRenderer>
										</fx:Component>
									</s:itemRenderer>
								</s:GridColumn>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
					<!--自动获取Path-->
					<s:Button id="autoadd" y="6" right="120" label="{resourceManager.getString('global','mgtunnel.tunnel.autopath')}" click="autoPanth(event)"/>
					<!--新增Path..-->
					<s:Button id="addpath" y="6" right="20" label="{resourceManager.getString('global','all.add')}Path..." 
							  click="addpath_click(event)"/>
				</s:Group>
				
			</s:VGroup>
		</s:BorderContainer>
		<s:Group bottom="0" width="95%" height="10%" horizontalCenter="0"
				 height.Tunnel_OneWay="30">
			<s:Group height="50%"  verticalCenter="0"
					 horizontalCenter.Tunnel_OneWay="0"
					 horizontalCenter.Tunnel_TwoWay="0" verticalCenter.Tunnel_TwoWay="0">
				<!--确定-->
				<s:Button id="savebtn" label="{resourceManager.getString('global','all.sure')}" click="savebtn_clickHandler(event)"
						  horizontalCenter="-90" verticalCenter="0"
						  horizontalCenter.Tunnel_OneWay="-60" verticalCenter.Tunnel_OneWay="0"/>
				<!--取消-->
				<s:Button id="cancelbtn" label="{resourceManager.getString('global','all.cancel')}" click="PopUpManager.removePopUp(this)"
						  horizontalCenter="80" verticalCenter="0"
						  horizontalCenter.Tunnel_OneWay="60" verticalCenter.Tunnel_OneWay="0"/>
			</s:Group>
			
		</s:Group>
	</mx:Canvas>
</s:TitleWindow>
