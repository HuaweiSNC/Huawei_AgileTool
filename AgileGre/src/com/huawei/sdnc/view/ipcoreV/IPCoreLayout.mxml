<?xml version="1.0" encoding="utf-8"?>

<!--
createTime : 2013-04-23
author     : jixiaofeng
-->

<common:MyGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				xmlns:twaver="http://www.servasoftware.com/2009/twaver/flex" 
				implements="com.huawei.sdnc.view.ISerializable,com.huawei.sdnc.view.IObserver"
				xmlns:common="com.huawei.sdnc.view.common.*"
				creationComplete="onInit()" xmlns:ipcoreV="com.huawei.sdnc.view.ipcoreV.*">
	<fx:Script>
	<![CDATA[
			import com.huawei.sdnc.tools.XmlConvert;
			import com.huawei.sdnc.view.ISerializable;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import twaver.Consts;
			import twaver.DataBox;
			import twaver.ElementBox;
			import twaver.IElement;
			import twaver.Link;
			import twaver.Node;
			import twaver.Styles;
			import twaver.Utils;
			import twaver.XMLSerializer;
			import twaver.network.layout.AutoLayouter;
			import twaver.network.layout.SpringLayouter;
			
			private var serializable:ISerializable = null;	
			private var autoLayouter:AutoLayouter = null;
			
			private var nodeColor:Number = 0xFF0000;
			private var linkColor:Number = 0x66CCFF;
			private var nodeOverColor:Number = 0xFFFF00;
			private var linkOverColor:Number = 0xFF00FF;
			private var selectColor:Number = 0x00FF00;
			
			private var lastElement:IElement = null;
			private var areaBox:ElementBox = new ElementBox();
			private var springLaouter:SpringLayouter = null;
			
			public function get dataBox():DataBox{				
				return areaBox;
			}
			
			public function onShown():void{
				if(springLaouter != null){
					springLaouter.start();
				}
			}
			
			public function onHidden():void{
				if(springLaouter != null){
					springLaouter.stop();
				}
			}
			
			protected function onInit():void
			{
				serializable = this as ISerializable;
				
				// 控制器初始化
				ipCoreCtrl.onInit();
				
				// TOPO容器初始化
				network.elementBox = areaBox;
				this.autoLayouter = new AutoLayouter(network);
				
				this.network.addEventListener(MouseEvent.MOUSE_MOVE, handleMouseMove);
				this.network.zoom = 1;
				
				this.autoLayouter.animate = false;
				this.autoLayouter.doLayout(Consts.LAYOUT_SYMMETRY);
				this.autoLayouter.animate = true;	
				network.callLater(function():void{
					autoLayouter = new AutoLayouter(network);
 					autoLayouter.doLayout(Consts.LAYOUT_ROUND, function():void{
						springLaouter = new SpringLayouter(network);
						springLaouter.start();	
						springLaouter.linkRepulsionFactor = 2;
					});					 
				});
			}
	
			public function refreshAreaBox(_ipcoretoponodeXml:XML, _ipcoretopolinkXml:XML):void
			{
				areaBox.name = "ipcoreRootSubmap";
				areaBox.setStyle(Styles.TREE_LABEL_SIZE, 11);
	    
				var nodeList:XMLList = _ipcoretoponodeXml.item;
				var lineList:XMLList = _ipcoretopolinkXml.item;
				
				//  创建Node
				for each(var nodeXml:XML in nodeList)
				{
					createNode(nodeXml.id, "CORE");
				}
				
				// 创建link
				for each(var lineXml:XML in lineList)
				{
					var fromN:Node = getNodeById(lineXml.source);
					var toN:Node = getNodeById(lineXml.destination);
					createLink(fromN,toN);
				}
			}
			
			private function getNodeById(idStr:String):Node
			{
				var node:Node = null;
				if(areaBox.containsByID(idStr)){
					node = areaBox.getDataByID(idStr) as Node;
				}
				return node;
			}
			
			
			private function createNode(name:String,type:String = ""):Node{
				if(areaBox.containsByID(name)){
					return areaBox.getDataByID(name) as Node;
				}
				var node:Node = new Node(name);
				node.name = name;
				if(type != "")
				{
					node.image = type+"Node";
				}
				else
				{
					node.setStyle(Styles.LABEL_POSITION, Consts.POSITION_CENTER);
					node.setStyle(Styles.LABEL_COLOR,0xffffff);
					node.setStyle(Styles.LABEL_SIZE, 17);
					node.setStyle(Styles.SELECT_COLOR, selectColor);
					node.setStyle(Styles.CONTENT_TYPE, Consts.CONTENT_TYPE_VECTOR);
					node.setStyle(Styles.VECTOR_SHAPE, Consts.SHAPE_CIRCLE);
					node.setStyle(Styles.VECTOR_GRADIENT, Consts.GRADIENT_RADIAL_NORTHEAST);
					node.setStyle(Styles.VECTOR_FILL_COLOR, nodeColor);	
				}
				areaBox.add(node);
				return node;
			}
			
			private function createLink(fromNode:Node, toNode:Node):void{
				var link:Link = new Link(fromNode, toNode);
				link.setStyle(Styles.LINK_COLOR, linkColor);
				link.setStyle(Styles.SELECT_COLOR, selectColor);
				link.setStyle(Styles.LINK_WIDTH, 2);	
				link.setStyle(Styles.LINK_TYPE, Consts.LINK_TYPE_PARALLEL);
				areaBox.add(link);
			}	
			
			private function handleMouseMove(e:MouseEvent):void{
				var element:IElement = network.getElementByMouseEvent(e);
				if(element != lastElement && !network.isMovingElement && !network.isSelectingElement){
					if(lastElement is Node){
						lastElement.setStyle(Styles.VECTOR_FILL_COLOR, this.nodeColor);
						lastElement.setStyle(Styles.LABEL_BOLD, false);
						lastElement.setStyle(Styles.LABEL_FILL, false);
					}
					else if(lastElement is Link){
						lastElement.setStyle(Styles.LINK_COLOR, this.linkColor);
					}
					
					if(element is Node){
						element.setStyle(Styles.VECTOR_FILL_COLOR, this.nodeOverColor);
						element.setStyle(Styles.LABEL_BOLD, true);
						element.setStyle(Styles.LABEL_FILL, true);
					}
					else if(element is Link){
						element.setStyle(Styles.LINK_COLOR, this.linkOverColor);
					}					
					
					this.lastElement = element;
				}	
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<!--<fx:XML source="assets/xml/l2topo_example.xml" id="topo_area_xml"/>-->
		<ipcoreV:IpCoreLayoutCtrl id="ipCoreCtrl" page="{this}"/>
	</fx:Declarations>
	<twaver:NetworkX id="network" width="100%" height="100%"/>
</common:MyGroup>
