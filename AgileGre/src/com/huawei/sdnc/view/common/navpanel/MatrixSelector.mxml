<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="init(event)" xmlns:navpanel="com.huawei.sdnc.view.common.navpanel.*"
		 width="240" height="240">
	<fx:Script>
		<![CDATA[
			import com.huawei.sdnc.event.SdncEvt;
			import com.huawei.sdnc.tools.OverlieUtil;
			import com.huawei.sdnc.tools.SdncUtil;
			import com.huawei.sdnc.view.dataCenter.physics.PhysicsLayout;
			import com.huawei.sdnc.vo.TopoXmlVo;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Spacer;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			
			import spark.components.Button;
			import spark.components.CheckBox;
			import spark.components.Label;
			import spark.components.RadioButton;
			/**上次选中的格子的纵列序号,-1表示没有选中任何格子 */
			private var __lastVer:int = -1;
			/**所有选中格子的数组*/
			private var __selectedGrids:ArrayCollection = new ArrayCollection();
			/**备选颜色数组*/
			private var __colorArr:Array = [0xff0000,0xffff00,0x00ff00,0x0000ff,0x00ffff,0x00a0e9,0x097c25,0x8f82bc];
			/**选中格子计数器*/
			private var __count:int;
			/**存放所有DC名称*/
			private var __dcNameArr:Array = SdncUtil.dcNameArr;
			/**存放所有VDC名称*/
			private var __vdcNameArr:Array = [];
			/**存放所有VDCID*/
			private var __vdcIDArr:Array = [];
			/**DC名称数组长度*/
			private var __dcLen:int;
			/**VDC名称数组长度*/
			private var __vdcLen:int;
			/**物理视图下当前DC名字*/
			private var __pVCurDcName:String = "root";
			/**虚拟视图下当前VDC名字*/
			private var __vVCurVdcname:String;
			
			private var __app:sdncui2;
			
			/**初始化组件 */
			protected function init(event:FlexEvent):void
			{
				__app = SdncUtil.app;
				__app.addEventListener(SdncEvt.PHYSICSVIEW_PING_START,function(e:SdncEvt):void{clearAllSelectedGrid()});
				__app.addEventListener(SdncEvt.PHYSICSVIEW_BACK_TO_ROOT,function(e:SdncEvt):void{
					selectSingleBtn(null,dcNames);
					clearAllSelectedGrid();
					initGrids();
					__pVCurDcName = "root";
				});
				__app.addEventListener(SdncEvt.VIRTUALVIEW_VDC_CHANGE,function(evt:SdncEvt):void{
					var vdcLen:int = vdcNames.numElements
					for(var i:int = 0; i < vdcLen; i++)
					{
						var vdcBtn:NameBtn = vdcNames.getElementAt(i) as NameBtn;
						vdcBtn.currentState = "unselected";
						if(evt.params.vdcName == vdcBtn.label)vdcBtn.currentState = "selected";
					}
				});
				createDcBtn();
				createVdcBtn();
				__app.main.addEventListener(SdncEvt.MODULE_CHANGE,changeBtnsState);
				scGrids.viewport.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, viewport_propertyChangeHandler);
			}
			/**初始化矩阵*/
			public function initMatrixSelector():void
			{
				__vdcNameArr = SdncUtil.vdcNameArr;
				var isCreateGrid:Boolean = true;
				var dcNameArr:Array = SdncUtil.dcHasDataArr;
				createVdcBtn();
				for(var i:* in dcNameArr)
				{
					var cuTopoXml:TopoXmlVo = SdncUtil.dcTopoXmlDic[dcNameArr[i]];
					if(cuTopoXml)
					{
						if(!cuTopoXml._vnmXml)
						{
							isCreateGrid = false;
						}
					}
					else
					{
						isCreateGrid = false;
					}
				}
				if(isCreateGrid) createGrids();
				if(__app.main.currentState == "virtual_view")
					changeBtnsState(new SdncEvt(SdncEvt.MODULE_CHANGE,"virtual_view"));
			}
			/**创建DC按钮*/
			private function createDcBtn():void
			{
				dcNames.removeAllElements();
				__dcLen = __dcNameArr.length;
				for(var i:int = 0;i < __dcLen;i++)
				{
					var dcName:NameBtn = new NameBtn();
					dcName.label = __dcNameArr[i];
					dcName.__btnType = "top";
					dcNames.addElement(dcName);
					dcName.toolTip = SdncUtil.dcMap[__dcNameArr[i]].desc;
					dcName.addEventListener(MouseEvent.CLICK,dcNameClickHandler);
				}
			}
			
			/**创建棋盘格子*/
			public function createGrids():void
			{
				grids.removeAllElements();
				for(var i:* in __dcNameArr)
				{
					__count = 0;
					var curDcName:String = __dcNameArr[i];
					if(SdncUtil.dcUrlInfos[curDcName])
					{
						var topoXmlVo:TopoXmlVo = SdncUtil.dcTopoXmlDic[curDcName];
						var vnmXml:XML = topoXmlVo._vnmXml;
						var vdcNameInCurDc:Array = [];
						__vdcIDArr.length = 0;
						SdncUtil.vlansInCurDc[curDcName] = [];
						var vlantopoInfos:Object = SdncUtil.vlantopoInfos;
						for each(var vnm:XML in vnmXml.network)
						{
							if(vlantopoInfos[vnm.vniId])
							{
								__vdcIDArr.push(vnm.vniId);
								vdcNameInCurDc.push(vnm.networkName);
								SdncUtil.vlansInCurDc[curDcName].push(vlantopoInfos[vnm.vniId]);
							}
						}
						//var vlansInCurDc:Array = SdncUtil.vlansInCurDc[curDcName];
						var numOfVlans:int = vdcNameInCurDc.length;
						for(var j:int = 0;j < numOfVlans;j++)
						{
							var len:int = vdcNames.numElements;
							for (var k:int = 0; k < len; k++)
							{
								if(vdcNameInCurDc[j] == (vdcNames.getElementAt(k) as NameBtn).label)
								{
									var matrixGrid:MatrixGrid = new MatrixGrid();
									matrixGrid.ver = i;
									matrixGrid.hor = k;
									matrixGrid.color = __colorArr[__count];
									matrixGrid.__dcName = __dcNameArr[i];
									matrixGrid.__vdcName = vdcNameArr[k];
									matrixGrid.__vdcID = __vdcIDArr[j];
									matrixGrid.x = i * matrixGrid.width;
									matrixGrid.y = k * matrixGrid.height;
									matrixGrid.addEventListener(MouseEvent.CLICK,gridClickHandler);
									if(__app.main.currentState != "virtual_view")
										matrixGrid.mouseEnabled = false;
									grids.addElement(matrixGrid);
									if(__count >= __colorArr.length) __count = 0;
									else __count++;
								}
							}
						} 
					}
					var sp:Spacer = new Spacer();
					sp.width = __dcLen * 48;
					sp.height = __vdcLen * 30;
					grids.addElement(sp);
				}
			}
			/**创建VDC名字*/
			private function createVdcBtn():void
			{
				vdcNames.removeAllElements();
				__vdcLen = __vdcNameArr.length;
				for(var k:int = 0;k < __vdcLen; k++)
				{
					var vdcName:NameBtn = new NameBtn();
					vdcName.label = __vdcNameArr[k];
					vdcName.width = 50;
					vdcName.__btnType = "left";
					vdcName.buttonMode = false;
					vdcName.toolTip = __vdcNameArr[k];
//					vdcName.addEventListener(MouseEvent.CLICK,vdcNameClickHandler);
					vdcNames.addElement(vdcName);
				}
			}
			
			protected function gridClickHandler(event:MouseEvent):void
			{
//				if(__count >= __colorArr.length) __count = 0;
				var grid:MatrixGrid = event.currentTarget as MatrixGrid	;
				if(__app.main.navPanel.currentState == "physics_view")
				{
					if(grid.isSelected)
					{
						grid.showColor();
						grid.isSelected = false;
						for(var j:* in __selectedGrids)
						{
							var item:MatrixGrid = __selectedGrids.getItemAt(j) as MatrixGrid;
							if(item == grid)
							{
								__selectedGrids.removeItemAt(j);
							}
						}
//						__app.main.physicsView.dataCenter.overlieVdc(grid.__dcName,grid.__vdcID,false,grid.color);
						__app.dispatchEvent(new SdncEvt(SdncEvt.CLEAROVERLIE_VDC,grid));
					}else
					{
						if(grid.ver != __lastVer)
						{
							clearAllSelectedGrid();
//							__count=0;
							//SdncUtil.app.dispatchEvent(new SdncEvt(SdncEvt.PHYSICSVIEW_DC_CHANGE,grid.dcName));
						}
						/*  if(grid.color == 0xffffff)
						{
							grid.color = __colorArr[__count] ;
							__count++;
						}  */
						grid.showColor();
						grid.isSelected = true;
						__selectedGrids.addItem(grid);
						__lastVer = grid.ver;
//						__app.main.physicsView.dataCenter.overlieVdc(grid.__dcName,grid.__vdcID,true,grid.color);
						__app.dispatchEvent(new SdncEvt(SdncEvt.OVERLIE_VDC,grid));
					}
				}else if(__app.main.navPanel.currentState == "virtual_view")
				{
//					__count = 0;
					clearAllSelectedGrid();
//					grid.color = __colorArr[__count] ;
					grid.showColor();
					grid.isSelected = true;
					__selectedGrids.addItem(grid);
					__app.dispatchEvent(new SdncEvt(SdncEvt.VIRTUALVIEW_VDC_CHANGE,{dcName:grid.__dcName,vdcName:grid.__vdcName}));
				}
				
			}
			/**清除所有格子的选中状态*/
			private function clearAllSelectedGrid():void
			{
				var len:int;
				if(__selectedGrids) len = __selectedGrids.length;
				for(var k:int = len - 1; k>=0 ;k--)
				{
					var selectedItem:MatrixGrid = __selectedGrids.getItemAt(k) as MatrixGrid;
					selectedItem.showColor();
					selectedItem.isSelected = false;
					__selectedGrids.removeItemAt(k);
				} 
			}
			
			protected function dcNameClickHandler(event:MouseEvent):void
			{
				var lastDcName:String;
				lastDcName = __pVCurDcName;
				var curDcBtn:NameBtn = event.currentTarget as NameBtn;
				__pVCurDcName = curDcBtn.label;
				if(!SdncUtil.dcUrlInfos[__pVCurDcName])
				{
					Alert.show(__pVCurDcName + " No data!");
					__pVCurDcName = lastDcName;
					return;
				}
				selectSingleBtn(curDcBtn,dcNames);
				clearAllSelectedGrid();
				__app.dispatchEvent(new SdncEvt(SdncEvt.PHYSICSVIEW_DC_CHANGE,__pVCurDcName));
				var numElement:int = grids.numElements;
				var selectedVer:int = __dcNameArr.indexOf(__pVCurDcName);
				for(var i:int = 0;i < numElement; i++)
				{
					if(grids.getElementAt(i) is MatrixGrid)
					{
						var grid:MatrixGrid = grids.getElementAt(i) as MatrixGrid;
						grid.mouseEnabled = false;
						grid.highLight(false);
						if(grid.ver == selectedVer)	{
							grid.mouseEnabled = true;
							grid.highLight(true);
						}
					}
				}
			}
			
			protected function vdcNameClickHandler(event:MouseEvent):void
			{
				/* var curVdcBtn:NameBtn = event.currentTarget as NameBtn;
				selectSingleBtn(curVdcBtn,vdcNames);
				vVCurVdcname = curVdcBtn.label;
				clearAllSelectedGrid();
				var numElement:int = grids.numElements;
				var selectedHor:int = _vdcNameArr.indexOf(vVCurVdcname);
				for(var i:int = 0;i < numElement;i++)
				{
					var grid:MatrixGrid = grids.getElementAt(i) as MatrixGrid;
					grid.mouseEnabled = false;
					grid.highLight(false);
					if(grid.hor == selectedHor)
					{
						grid.mouseEnabled = true;
						grid.highLight(true);
					}
				} */
				//SdncUtil.app.dispatchEvent(new SdncEvt(SdncEvt.VIRTUALVIEW_VDC_CHANGE,vVCurVdcname));
			}
			
			/**切换视图时转换dc按钮或vdc按钮的可选状态*/
			private function changeBtnsState(e:SdncEvt):void
			{
				var dcNamesLen:int = dcNames.numElements;
				var vdcNamesLen:int = vdcNames.numElements;
				var isEnableDcBtn:Boolean;
				var isEnableVdcBtn:Boolean;
				clearAllSelectedGrid();
				var physicsView:PhysicsLayout = __app.main.physicsView.dataCenter;
				physicsView.overlieUtil.clearAllOverlie(physicsView.cuNetBox);
				if(String(e.params) == "physics_view")
				{
					initGrids();
					isEnableDcBtn = true;
					isEnableVdcBtn = false;
					physicsView.overlieUtil.clearAllOverlie(physicsView.cuNetBox);
					var dcBtnLen:int = dcNames.numElements;
					 if(__pVCurDcName == "root") 
					{
//						__app.main.navPanel.initPathBtns();
						 __app.main.navPanel.pathBtns.array = ["LOC","Root"];
					} 
					for(var k:int = 0 ; k < dcBtnLen; k++)
					{
						var pvDcBtn:NameBtn = dcNames.getElementAt(k) as NameBtn;
						if(pvDcBtn.label == __pVCurDcName)
						{
							pvDcBtn.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
							break;
						}
					}
					selectSingleBtn(null,vdcNames);
				}else if(String(e.params) == "virtual_view")
				{
					initGrids(true);
					isEnableDcBtn = false;
					isEnableVdcBtn = true;
					var vdcBtnsLen:int = vdcNames.numElements;
					/* if(!vVCurVdcname) vVCurVdcname = vdcNameArr[0];
					for(var l:int = 0 ; l < vdcBtnsLen; l++)
					{
						var vVdcBtn:NameBtn = vdcNames.getElementAt(l) as NameBtn;
						if(vVdcBtn.label == vVCurVdcname)
						{
							vVdcBtn.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
							break;
						}
					} */
					if(grids.numElements>0){
						var grid:MatrixGrid = grids.getElementAt(0) as MatrixGrid;
						if(grid)
						{
							if(grid.color == 0xffffff)
							{
								grid.color = __colorArr[__count] ;
								__count++;
							}
							grid.showColor();
							grid.isSelected = true;
							__selectedGrids.addItem(grid);
							__lastVer = grid.ver;
							__app.dispatchEvent(new SdncEvt(SdncEvt.VIRTUALVIEW_VDC_CHANGE,{dcName:grid.__dcName,vdcName:grid.__vdcName}));
						}
					}
					selectSingleBtn(null,dcNames);
				}
				for(var i:int = 0;i < dcNamesLen;i++)
				{
					var dcBtn:NameBtn = dcNames.getElementAt(i) as NameBtn;
//					dcBtn.mouseEnabled = isEnableDcBtn;
					if(isEnableDcBtn)
					{
						dcBtn.addEventListener(MouseEvent.CLICK,dcNameClickHandler);
						dcBtn.buttonMode = true;
					}else
					{
						dcBtn.removeEventListener(MouseEvent.CLICK,dcNameClickHandler);
						dcBtn.buttonMode = false;
					}
				}
				for(var j:int = 0;j < vdcNamesLen;j++)
				{
					var vdcBtn:NameBtn =vdcNames.getElementAt(j) as NameBtn;
//					vdcBtn.mouseEnabled = isEnableVdcBtn;
				}
			}
			/**设置单个dc或vdc选中状态
			 * @param curBtn:为单击的按钮,传入NULL时为清除所有选中状态
			 * @param btnGroup:为要操作的按钮组
			 */
			private function selectSingleBtn(curBtn:NameBtn,btnGroup:Group):void
			{
				var len:int = btnGroup.numElements;
				for(var i:int = 0; i < len; i++)
				{
					var btn:NameBtn = btnGroup.getElementAt(i) as NameBtn;
					var state:String = "unselected";
					if(curBtn == btn) state = "selected";
					btn.currentState = state;
				}
			}
			/**初始化所有格子
			 * @param enableGrid:是否禁用格子。ture为启用，false为禁用
			 */
			private function initGrids(enableGrid:Boolean = false):void
			{
				var len:int = grids.numElements;
				for(var i:int = 0; i<len; i++)
				{
					if(grids.getElementAt(i) is MatrixGrid){
						
						var grid:MatrixGrid = grids.getElementAt(i) as MatrixGrid;
						grid.mouseEnabled = enableGrid;
						grid.highLight(enableGrid);
					}
				}
				__count = 0;
			}
			
			private function viewport_propertyChangeHandler(event:PropertyChangeEvent):void
			{
				var _index:Number = Number(event.newValue);
				switch(event.property) 
				{
					case "verticalScrollPosition": 
						if(_index%30 == 0)
						{
							grids.verticalScrollPosition = _index;
							if(_index%60 == 0) gridBg.y = 30;
							else gridBg.y = 0;
							break;
						}else
						{
							grids.verticalScrollPosition = Math.round(_index/30)*30;
							break;
						}
					case "horizontalScrollPosition":
						if(_index%48 == 0)
						{
							grids.horizontalScrollPosition = _index;
							if(_index%96 == 0) gridBg.x = 49;
							else gridBg.x = 1;
							break;
						}else
						{
							grids.horizontalScrollPosition = Math.round(_index/48)*48;
							break;
						}
						break;
				}
			}
			
			public function get vdcNameArr():Array
			{
				return __vdcNameArr;
			}
			/**存放所有VDC名称数组*/
			public function set vdcNameArr(value:Array):void
			{
				__vdcNameArr = value;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<!--<s:Button id="leftBtn" left="33" top="3" width="15" height="15" click="leftBtnClickHandler(event)" visible="false" includeInLayout="false"/>-->
	
	<s:Group width="48" height="30" top="0" left="1">
		<s:Line xFrom="0" yFrom="0" xTo="48" yTo="0" id="lTop">
			<s:stroke>
				<s:SolidColorStroke color="0x535d73" weight="1"/>
			</s:stroke>
		</s:Line>
		<s:Line xFrom="0" yFrom="0" xTo="0" yTo="30" id="lLeft">
			<s:stroke>
				<s:SolidColorStroke color="0x535d73" weight="1"/>
			</s:stroke>
		</s:Line>
		<s:Line xFrom="0" yFrom="29" xTo="48" yTo="29" id="lBottom">
			<s:stroke>
				<s:SolidColorStroke color="0x535d73" weight="1"/>
			</s:stroke>
		</s:Line>
		<s:Line xFrom="47" yFrom="0" xTo="47" yTo="30" id="lRight">
			<s:stroke>
				<s:SolidColorStroke color="0x535d73" weight="1"/>
			</s:stroke>
		</s:Line>
		<s:Rect id="bg" top="2" left="2" right="2" bottom="2" >
			<s:fill>
				<s:SolidColor color="0x425472" alpha="0"/>
			</s:fill>
		</s:Rect>	
		<s:Line xFrom="0" yFrom="0" xTo="48" yTo="30">
			<s:stroke>
				<s:SolidColorStroke color="0x535d73"/>
			</s:stroke>
		</s:Line>
		<s:Label left="3" bottom="0" text="VDC" height="14" fontSize="9" textAlign="left" paddingLeft="0"/>
		<s:Label left="25" top="3" text="DC" height="14" fontSize="9" textAlign="left" paddingLeft="0"/>
	</s:Group>
	
	<s:Scroller width="240" top="0" left="48" horizontalScrollPolicy="off">
		<s:HGroup id="dcNames"  gap="0" horizontalScrollPosition="{scGrids.horizontalScrollBar.value}"/>
	</s:Scroller>
	
		
	<!--<s:Group id="dcNamesMask" width="{gridBg.width}" height="{dcNames.height}" left="51.5">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0"/>
			</s:fill>
		</s:Rect>
	</s:Group>-->
	<!--<s:Button id="rightBtn" left="290" top="3" width="15" height="15" click="rightBtnClickHandler(event)" visible="false" includeInLayout="false"/>-->
	<s:BitmapImage id="gridBg" source="@Embed('assets/imgs/navpanel/nav_panel_grid.png')" x="49" y="30" mask="{gridsMask}"/>
	<s:Rect width="{gridBg.width - 48}" height="{gridBg.height - 30}" top="30" left="49">
		<s:fill>
			<s:SolidColor color="0" alpha=".7"/>
		</s:fill>
	</s:Rect>
	
	
	<s:Group id="gridsMask" width="{gridBg.width - 48}" height="{gridBg.height - 30}" top="30" left="49" alpha=".2">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0xff0000"/>
			</s:fill>
		</s:Rect>
	</s:Group>
	<!--<s:Button id="upBtn" top="3" left="16" width="15" height="15" click="upBtn_clickHandler(event)" visible="false" includeInLayout="false"/>-->
	
	<s:Scroller height="240" top="30" left="1" verticalScrollPolicy="off">
		<s:VGroup id="vdcNames"  gap="0" verticalScrollPosition="{scGrids.verticalScrollBar.value}"/>
	</s:Scroller>
	<s:Scroller left="49" top="30" id="scGrids" width="251" height="251" verticalScrollPolicy="on" horizontalScrollPolicy="on" skinClass="com.huawei.sdnc.view.skins.ScrollerSkin">
		<s:Group id="grids" right="11" bottom="11" mask="{gridsMask}"/>	
	</s:Scroller>
		
	<!--<s:Group id="vdcNamesMask" width="{vdcNames.width}" height="{gridBg.height}" top="27">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0"/>
			</s:fill>
		</s:Rect>
	</s:Group>-->
	<!--<s:Button id="downBtn" top="270" left="16" width="15" height="15" click="downBtn_clickHandler(event)" visible="false" includeInLayout="false"/>-->
	
	<s:HGroup id="allSelectBtns" left="47" top="262" gap="30">
		
	</s:HGroup>
</s:Group>
