<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:btn="com.huawei.sdnc.view.ipRan.physics.*"
		 width="40%" height="40%" creationComplete="init()" fontFamily="微软雅黑"
		 keyUp="onKeyUp(event)"
		 >
	<fx:Script>
		<![CDATA[
			import com.huawei.sdnc.event.SdncEvt;
			import com.huawei.sdnc.model.Device;
			import com.huawei.sdnc.model.acl.AclGroup;
			import com.huawei.sdnc.model.acl.aclRuleBas4.AclRuleAdv4;
			import com.huawei.sdnc.model.qos.QosClassifier;
			import com.huawei.sdnc.model.qos.QosPolicy;
			import com.huawei.sdnc.model.qos.QosPolicyNode;
			import com.huawei.sdnc.model.qos.QosRuleAcl;
			import com.huawei.sdnc.tools.PopupManagerUtil;
			import com.huawei.sdnc.tools.SdncUtil;
			import com.huawei.sdnc.view.common.node.StateNode;
			import com.huawei.sdnc.view.ipCore_DCI.dataHandle.DataHandleTool;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			import twaver.IData;
			import twaver.IElement;
			import twaver.networkx.NetworkX;
			private var __app:sdncui2
			public var element:IElement;
			[Bindable]
			public  var fileNameTypeDropDownList:ArrayCollection = new ArrayCollection([
				{id:0,label:'设备1'}
			]);
			[Bindable]
			public var flowPolicies:ArrayCollection=new ArrayCollection([{"policyName":"策略1","srcIp":"1.1.1.1","desIp":"1.1.1.2"}]);
			private var devices:Array=[];
			public function init():void
			{
				__app=SdncUtil.app;
		        devices= DataHandleTool.devices;
				focusManager.setFocus(ddl);
		        fileNameTypeDropDownList=new ArrayCollection(devices);
				if(element==null){
					ddl.selectedIndex=0;
					upDatePolicy();
				}else{
					if(element is StateNode){
						var stateNode:StateNode=element as StateNode;
						var deviceName:String=stateNode.name;
						for(var i:int=0;i<devices.length;i++){
							var d:Object=devices[i];
							var devicename:String = d["devicename"];
							//						var srcIp:String=d["ip"];
							if(deviceName==devicename){
								ddl.selectedIndex=i;
								break;
							}
						}
					}
					
					if(SdncUtil.cuProjectType=="test"){
						var policyes:Array=stateNode.getClient("policyes");
						if(policyes!=null){
							//for(var i:int=0;i<policyes.length;i++){
							//var policy:Object=policyes[i];
							flowPolicies=new ArrayCollection(policyes);
							//}
						}else{
							flowPolicies=new ArrayCollection([]);
						}
					}else{
						var policyArr:Array=DataHandleTool.refreshPolicyList2(stateNode);
						flowPolicies=new ArrayCollection(policyArr);
				}
			}
			}
			public function refreshPolicyList():void
			{
				if(element is StateNode){
				   	var stateNode:StateNode=element as StateNode;
				}
				if(SdncUtil.cuProjectType=="test"){
					var policyes:Array=stateNode.getClient("policyes");
					if(policyes!=null){
						flowPolicies=new ArrayCollection(policyes);
					}else{
						flowPolicies=new ArrayCollection([]);
					}
				}else{
					var device:Device=stateNode.getClient("device");
					device.getQos(false,function():void{
						var policyArr:Array=DataHandleTool.refreshPolicyList2(stateNode);
						flowPolicies=new ArrayCollection(policyArr);
					});
				}
			}
			public function beginDrag(e:MouseEvent):void
			{
				var re:Rectangle=new Rectangle(0,0,Capabilities.screenResolutionX,Capabilities.screenResolutionY);
				this.startDrag(false,re);
			}
			public function endDrag(e:MouseEvent):void
			{
				this.stopDrag();
			}
			
			
			/**
			 *增加流策略 
			 */	
			public function addFlowPolicy():void
			{
				var fp:AddFlowPolicy=AddFlowPolicy(PopUpManager.createPopUp(this,AddFlowPolicy,true));
				fp.element=element;
				fp.flowDefine=this;
				PopUpManager.centerPopUp(fp);
			}
			/**
			 * 编辑流策略
			 */	
			public function editFlowPolicy():void
			{
				
				var fp:EditFlowPolicy=EditFlowPolicy(PopUpManager.createPopUp(this,EditFlowPolicy,true));
				fp.element=element;
				fp.ddl=ddl;
				fp.g=g;
				fp.flowDefine=this;
				PopUpManager.centerPopUp(fp);
			} 
			
			public function delPolicy():void
			{
				Alert.show("确认执行此操作吗？","提示框",Alert.OK | Alert.CANCEL,this,closeDelete);
			}
			
			private var curDeviceNum:int=0;
			private var hasHandledNum:int=0;
			public function closeDelete(e:CloseEvent):void
			{
				curDeviceNum=0;
				hasHandledNum=0;
				if(e.detail==Alert.OK){
					if(SdncUtil.cuProjectType=="test"){
						var policyes:Array=element.getClient("policyes");
						var p:Object=g.selectedItem;
						var srcIp1:String=p["srcIp"];
						
						var index:int;
						for(var i:int=0;i<policyes.length;i++){
							var policy:Object=policyes[i];
							var ip:String=policy["srcIp"];
							if(ip==srcIp1){
								index=i;
								break;
							}
						}
						policyes.splice(index,1);
						refreshPolicyList();
					}else{
						var poli:Object=g.selectedItem;
						//流分类名字
						var name:String=poli["policyName"];
						//五元组名字
						var aclRuleName:String=poli["aclRuleName"];
						//流行为名字
						var behaviorName:String=poli["behaviorName"];
						var networkX:NetworkX = __app.ipcore.physicsView.networkX;
						curDeviceNum=0;
						PopupManagerUtil.getInstence().popupLoading(this);
						networkX.elementBox.forEachByBreadthFirst(function(item:IData):void{
							if(item is StateNode){
								var stateNode:StateNode=item as StateNode;
								var device:Device=stateNode.getClient("device");
								var classifiers:Array=device.qos.qosClassifiers;
								for each(var classifier:QosClassifier in classifiers){
									var classifierName:String=classifier.classifierName;
									if(classifierName==name){
										hasHandledNum++;
										device.delPolicy(poli,whenRefresh);
									}
								}
							}
						});
					}
				}
			}
			private function whenRefresh():void
			{
				curDeviceNum++;
				if(curDeviceNum==hasHandledNum){
					var stateNode:StateNode=element as StateNode;
					var polist:Array=DataHandleTool.refreshPolicyList2(stateNode);
					flowPolicies=new ArrayCollection(polist);
					PopupManagerUtil.getInstence().closeLoading();
				}
			}
			/**
			 * 当更换设备时更新流策略
			 */	
			public function upDatePolicy():void
			{
				var networkX:NetworkX = __app.ipcore.physicsView.networkX;
				var selectedDeviceIp:Object=ddl.selectedItem;
				var ip:String=selectedDeviceIp["ip"];
				var symbol:Boolean=true;
				networkX.elementBox.forEachByBreadthFirst(function(item:IData):void{
					if(symbol){
						if(item is StateNode){
							var stateNode:StateNode=item as StateNode;
							var ip1:String=stateNode.getClient("ip");
							if(ip1==ip){
								element=stateNode;
								symbol=false;
							}
						}
					}
				});
				if(SdncUtil.cuProjectType=="test"){
					var devices:Array=element.getClient("policyes");
					flowPolicies=new ArrayCollection(devices);
				}else{
					var polist:Array=DataHandleTool.refreshPolicyList2(element as StateNode);
					flowPolicies=new ArrayCollection(polist);
				}
				
			}
			
			protected function onKeyUp(event:KeyboardEvent):void
			{
				// TODO Auto-generated method stub
				if(event.keyCode==Keyboard.ESCAPE){
					__app.dispatchEvent(new SdncEvt(SdncEvt.CLOSE_FLOW_DEFINE));
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:GlowFilter id="glow" color="0xffffff"/>
	</fx:Declarations>
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:SolidColor alpha=".9" color="0xcccccc"/>
		</s:fill>
	</s:Rect>
	<s:RectangularDropShadow left="0" right="0" top="0" bottom="0" width="100%" height="100%"
							 alpha="0.32" angle="90" blRadius="0" blurX="20" blurY="20" brRadius="0"
							 color="#000000" distance="11"/>
	<s:VGroup width="100%" height="100%" gap="0">
		<s:Group id="titlelayer" left="0" width="100%" height="10%" mouseDown="beginDrag(event)"
				 mouseUp="endDrag(event)">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:LinearGradient>
						<s:GradientEntry color="0x3276b7"/>
						<s:GradientEntry color="0x4489ca"/>
					</s:LinearGradient>
				</s:fill>
			</s:Rect>
			<s:Label left="10" color="0xf9f3f3" fontFamily="微软雅黑" fontSize="16" fontWeight="bold"
					 text="流定义" verticalCenter="0"/>
			<s:Image id="cbtn" right="15" buttonMode="true"
					 click="__app.dispatchEvent(new SdncEvt(SdncEvt.CLOSE_FLOW_DEFINE))"
					 mouseOut="cbtn.filters=null" mouseOver="cbtn.filters=[glow]"
					 source="@Embed('assets/imgs/ipran/close.png')" verticalCenter="0"/>
		</s:Group>
		
		<s:VGroup id="content" width="100%" height="80%">
			<s:Group width="100%" height="15%">
				<s:Label x="21" text="导流入隧道" verticalCenter="0"/>
				<s:Label right="{ddl.width+btn.width+50}" text="选择设备" verticalCenter="0"/>
				<s:DropDownList id="ddl" right="{btn.width+40}" width="150" change="upDatePolicy()"
								dataProvider="{fileNameTypeDropDownList}" labelField="devicename"
								requireSelection="true" verticalCenter="0"/>
				
				<s:Button id="btn" right="{g.x}" label="增加..." click="addFlowPolicy()"
						  verticalCenter="0"/>
			</s:Group>
			<s:Group width="100%" height="85%">
				<s:DataGrid id="g" width="95%" height="95%" dataProvider="{flowPolicies}"
							horizontalCenter="0" requestedRowCount="4" textAlign="center"
							verticalCenter="0">
					<s:columns>
						<s:ArrayList>
							<s:GridColumn dataField="policyName"
										  headerRenderer="com.huawei.sdnc.view.common.render.dgheaderReader"
										  headerText="流策略"></s:GridColumn>
							<s:GridColumn dataField="srcIp"
										  headerRenderer="com.huawei.sdnc.view.common.render.dgheaderReader"
										  headerText="源IP地址"></s:GridColumn>
							<s:GridColumn dataField="desIp"
										  headerRenderer="com.huawei.sdnc.view.common.render.dgheaderReader"
										  headerText="目的IP地址"></s:GridColumn>
							<s:GridColumn editable="false"
										  headerRenderer="com.huawei.sdnc.view.common.render.dgheaderReader"
										  headerText="编辑">
								<s:itemRenderer>
									<fx:Component>
										<s:GridItemRenderer>
											<s:Button label="@Resource(bundle='zh_CN',key=edit)"
													  click="outerDocument.editFlowPolicy()"
													  horizontalCenter="0" verticalCenter="0"/>
										</s:GridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							<s:GridColumn editable="false"
										  headerRenderer="com.huawei.sdnc.view.common.render.dgheaderReader"
										  headerText="删除">
								<s:itemRenderer>
									<fx:Component>
										<s:GridItemRenderer>
											<s:Button label="删除" click="outerDocument.delPolicy()"
													  horizontalCenter="0" verticalCenter="0"/>
										</s:GridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
						</s:ArrayList>
					</s:columns>
				</s:DataGrid>
			</s:Group>
		</s:VGroup>
	</s:VGroup>
</s:Group>
